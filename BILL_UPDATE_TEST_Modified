____________________________________________________________BillGSTUpdate.cshtml___________________________________________________________________

@model MVCConsignment.ViewModel.VM_BillGSTUpdate
@using MVCConsignment.AlertMessage

@{
    ViewBag.Title = "Bill GST Update";
    Layout = "~/Views/Shared/_MainDashboard.cshtml";
}
<link href="~/Content/PagedList.css" rel="stylesheet" />
<link href="~/Content/ResponsiveTable.css" rel="stylesheet" />
<script src="~/Scripts/Custom/num2Word.js"></script>
<link href="~/Content/Page.css" rel="stylesheet" />
<script src="~/Scripts/Custom/custom_Validate.js"></script>

@using (Html.BeginForm(FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div class="row" style="padding-bottom:1px;">
        @{ Html.RenderPartial("_Alerts");}
    </div>
    <div class="row" style="padding-bottom:1px; text-align:center">
        <div class="alert alert-danger alert-dismissable" id="pageAlert" style="display:none;">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <b id="alertMessage"></b>
        </div>
    </div>
      
     <div class="row" style="padding-bottom:5px;">
        <div class="col-md-1">
            Bill No
        </div>
        <div class="col-md-3">
            @Html.TextBoxFor(model => model.Search_Bill_No, new { @class = "form-control", @id = "Search_Bill_No", autocomplete = "off", @maxlength = "20" })
            <div class="speech-bubble"> 
                @Html.ValidationMessageFor(model => model.Search_Bill_No, "", new { @id = "ErrorSearch_Bill_No" })
            </div>
        </div> 
        <div class="col-md-3" style="text-align:left;">
            <input type="submit" class="btn btn-success" name="Show" value="Show" style="margin-top:0px;margin-left:10px;width:80px;padding:3px;" id="btnSearch" />
        </div>
    </div>

    if (!string.IsNullOrEmpty(@Model.BILL_NO))
    {

        <div class="row BillDetails DetailsForUpdate" style="text-align:left;">
            <div style="padding-bottom:0px; ">
                <div class=" form-group">
                    <div class="col-md-12 col-xs-12 page-header" style="margin: 0px;">
                        Bill Details
                    </div>
                </div>
            </div>
        </div>


        <div id="no-4-tables" class="row DetailsForUpdate">
            <table class="col-md-12 table-bordered table-striped table-condensed cf">
                <tbody>
                    <tr>
                        <td colspan="2" data-title="Bill No" class="col-md-2">Bill No</td>
                        <td colspan="2" data-title="Bill No" class="col-md-2">
                            <div id="divBillNo">&nbsp;@Html.DisplayFor(x => x.BILL_NO) </div>
                        </td>
                        <td colspan="2" data-title="Bill Date" class="col-md-2">Bill Date</td>
                        <td colspan="2" data-title="Bill Date" class="col-md-2">
                            <div id="divBillDate">&nbsp;@Html.DisplayFor(x => x.BILL_DATE)</div>
                        </td>
                        <td colspan="2" data-title="Amount" class="col-md-2">Amount</td>
                        <td colspan="2" data-title="Amount" class="col-md-2">
                            <div id="divAmount">&nbsp;@Html.DisplayFor(x => x.AMOUNT)</div>
                        </td>
                    </tr>

                    <tr>
                        <td colspan="2" data-title="prevCustomerName" class="col-md-2">Customer Name</td>
                        <td colspan="10" data-title="prevCustomerName" class="col-md-2">
                            <div id="divprevCustomerNam">&nbsp;@Html.DisplayFor(x => x.prev_CustomerName)</div>
                        </td>
                    </tr>

                    <tr>
                        <td colspan="2" data-title="prevGSTNo" class="col-md-2">GST No</td>
                        <td colspan="2" data-title="prevGSTNo" class="col-md-2">
                            <div id="divprevGSTNo">&nbsp;@Html.DisplayFor(x => x.prev_GST_No)</div>
                        </td>

                        <td colspan="2" data-title="prevAddress" class="col-md-2">Address</td>
                        <td colspan="6" data-title="prevAddress" class="col-md-2">
                            <div id="divprevAddress">&nbsp;@Html.DisplayFor(x => x.prev_Address)</div>
                        </td>
                     </tr>
               </tbody>
            </table>
          </div>

    
        <div class="row DetailsForUpdate" style="text-align:left;">
            <div style="padding-bottom:0px; ">
                <div class=" form-group">
                    <div class="col-md-12 col-xs-12 page-header" style="margin: 0px;">
                       Update Details 
                    </div>
                </div>
            </div>
        </div>

    <div id="no-4-tables" class="row DetailsForUpdate">
        <table class="col-md-12 table-bordered table-striped table-condensed cf">
            <tbody>
                <tr>
                    <td colspan="2" data-title="Customer Name" class="col-md-2">Customer Name</td>
                    <td colspan="10" data-title="Customer Name">
                        @Html.DropDownListFor(model => model.CustomerName, Model.Customer_list, "Select Customer Name", new { @class = "form-control", @id = "ddlCustomerName" })
                        <div class="speech-bubble">
                            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @id = "ErrorddlCustomerName" })
                        </div>
                    </td>
                    <td colspan="2" class="col-md-2 col-lg-2">Party State Name</td>
                    <td data-title="Party State Name" class="col-md-2 col-lg-2" colspan="2">
                        @Html.DropDownListFor(model => Model.StateId, new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text"), "---- Select ----", new { @class = "form-control", @id = "ddlStateList" })
                        <div class="speech-bubble">
                            @Html.ValidationMessageFor(model => model.StateId, "", new { @id = "ErrorddlStateId" })
                            <span class="field-validation-error" id="ErrorddlStateList"></span>
                        </div>
                    </td>
                    
                </tr>
                <tr>
                    <td colspan="2" class="col-md-2 col-lg-2">Party GSTIN</td>
                    <td data-title="Party GSTIN" class="col-md-2 col-lg-2" colspan="2">
                        @Html.DropDownListFor(model => Model.GST_NO, new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text"), "---- Select ----", new { @class = "form-control", @id = "ddlGSTIN" })
                        <div class="speech-bubble">
                            @Html.ValidationMessageFor(model => model.GST_NO, "", new { @id = "ErrorddlGST_NO" })
                            <span class="field-validation-error" id="ErrorGSTINNo"></span>
                        </div>
                    </td>

                        <td colspan="2" data-title="Address" class="col-md-2">Address</td>
                    <td colspan="10" data-title="Address">
                        @Html.DropDownListFor(model => model.Party_Address_ID, new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text"), "---- Select ----", new { @class = "form-control", @id = "ddlParty_Address" })
                        <div class="speech-bubble">
                            @Html.ValidationMessageFor(model => model.Party_Address_ID, "", new { @id = "ErrorddlParty_Address" })
                        </div>
                    </td>
                </tr>

                <tr>
                    <td colspan="18">
                        <div id="div_btnUpdate" class="row" style="padding-bottom:5px; text-align:center;">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <input type="submit" name="Update" class="btn btn-success" value="Update" style="margin-top:10px;margin-left:10px;width:80px;" id="btnUpdate" />
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
           </tbody>
        </table>
    </div>
}
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

    <script type="text/javascript">
    $(document).ready(function () {
        $(".speech-bubble").hide();
        $("input[type=text]").on('keyup keypress blur change keydown', function (e) {
            Validate();
        });

        function Validate() {
            $(".speech-bubble").hide();
            $(".speech-bubble").each(function () {
                if ($(this).find('.field-validation-error').text() == "") {
                    $(this).hide();
                    return true;
                }
                else {
                    $(this).show();
                    return false;
                }
            });
        }
         

        $('#btnUpdate').click(function () {

        });

        $('#btnSearch').click(function () {
            $('.DetailsForUpdate').hide();
        });

        $("#ddlCustomerName").change(function () {
            StateDtl();
        });

            function StateDtl() {
            $("#ddlStateList").empty();
            var partyId = $("#ddlCustomerName").val();

            if(parseInt(partyId) != ""){
            $.ajax({
                    async: false,
                    cache: false,
                    type: "GET",
                    url: '@Url.Action("GetCustomerState_Dtls", "Consignment")',
                    data: { "Cust_ID": partyId },
                    success: function (json, textStatus, xhr) {
                        $("#ddlStateList").append('<option value=""> ---- Select ----- </option>');
                        json = json || {};
                       
                        if (json.length > 0) {
                            var j = 0;
                            for (var i = 0; i < json.length; i++) {
                               $("#ddlStateList").append('<option value="' + json[i].State_Code + '">' + json[i].State_Name + '</option>');
                            }
                         }
                     }
                });
             }
            else {
                $("#ddlStateList").append('<option value=""> ---- Select ----- </option>');
            }
        }
        
        $("#ddlStateList").change(function (){
            GSTIN();
        });

        function GSTIN() {
            $("#ddlGSTIN").empty();  
            var partyId = $("#ddlCustomerName").val();
            var stateId = $("#ddlStateList option:selected").val();

            $.ajax({
                async: false,
                cache: false,
                type: "GET",
                url: '@Url.Action("BindGSTINList", "Revenue")',
                data: { "partyId": partyId, "stateId": stateId },
                success: function (json, textStatus, xhr) {
                    $("#ddlGSTIN").append('<option value=""> ---- Select ----- </option>');
                    json = json || {};
                    if (json.length > 0) {

                        var j = 0;
                        for (var i = 0; i < json.length; i++) {
                            if (json[i].Text == null || $.trim(json[i].Text) == '') {
                                j++;
                                $("#ddlGSTIN").append('<option value="' + json[i].Value + '">Unregistered - ' + j + '</option>');
                            }
                            else {
                                $("#ddlGSTIN").append('<option value="' + json[i].Text + '">' + json[i].Text + '</option>');
                            }
                        }
                    }
                }
            });
        }



        $("#ddlGSTIN").change(function () {
            Address();
        });

        function Address() {
            $("#ddlParty_Address").empty();
           
            $.ajax({
                async: false,
                cache: false,
                type: "GET",
                url: '@Url.Action("GetCustomerAddress_Dtls_by_GSTIN", "Consignment")',
                data: { "GSTIN": $("#ddlGSTIN").val() },
                success: function (json, textStatus, xhr) {
                    $("#ddlParty_Address").append('<option value=""> ---- Select ----- </option>');
                    json = json || {};
                    if (json.length > 0) {
                        alert("Check");
                        var j = 0;
                        for (var i = 0; i < json.length; i++) {
                           
                            $("#ddlParty_Address").append('<option value="' + json[i].CUSTADD_ID + '">' + json[i].Address + '</option>');
                           
                        }
                    }
                 }
             });
          }

                               


     //   $("#ddlGSTIN").change(PartyAddressBasedOnGSTIN);
    

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }
    });
</script>


______________________________________________________VM_BillGSTUpdate_________________________________________________________________________

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MVCConsignment.Models;

namespace MVCConsignment.ViewModel
{
    public class VM_BillGSTUpdate
    {
        [Display(Name = "Enter Bill No")]
        [Required(ErrorMessage = "Enter Bill No .")]
        public string Search_Bill_No { get; set; }

     
        public string BILL_NO { get; set; }

        public string BILL_DATE { get; set; }

        public Decimal AMOUNT { get; set; } 

        public string prev_CustomerName { get; set; }

        public string prev_GST_No { get; set; }

        public string prev_Address { get; set; }

        [Display(Name = "Select Customer Name")]
        [Required(ErrorMessage = "Select Customer Name")]
        public decimal CustomerName { get; set; }

        public string StateId { get; set; }
        public SelectList StateList { get; set; }

        [Display(Name = "Select GST_NO")]
        [Required(ErrorMessage = "Select GST_NO")] 
        public string GST_NO { get; set; }

        [Display(Name = "Select Party Address")]
        [Required(ErrorMessage = "Select Party Address")]
        public decimal Party_Address_ID { get; set; }


        [Required(ErrorMessage = "Select Customer list")]
        public SelectList Customer_list { get; set; }

        [Required(ErrorMessage = "Select GST NO List")]
        public SelectList GST_NO_List { get; set; } 

        public SelectList Party_AddressList { get; set; }


       

        public SelectList Address { get; set; }

    }
}


___________________________________________________________DAL_ERROR.cs____________________________________________________________________

using MVCConsignment.ViewModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Web;

namespace MVCConsignment.App_Code.FAMS
{
    public class DAL_ERROR
    {
        string logisConnStr = ConfigurationManager.ConnectionStrings["CALYX_LOGIS"].ToString();

        SqlTransaction mytrans = null;

        public DAL_ERROR(){}

        #region Advance Receipt Tds Update
        public DataTable Fill_Receipt_For_Tds_Update(string branch, int partyId, string fromDate, string toDate)
        {
            SqlConnection conn = new SqlConnection(logisConnStr);
            SqlDataAdapter dAd = new SqlDataAdapter("usp_Select_Receipt_For_Tds_Update", conn);
            dAd.SelectCommand.CommandType = CommandType.StoredProcedure;
            DataSet dSet = new DataSet();
            try
            {
                dAd.SelectCommand.Parameters.AddWithValue("@LOGIN_BRANCH", branch);
                dAd.SelectCommand.Parameters.AddWithValue("@PARTY_ID", partyId);
                dAd.SelectCommand.Parameters.AddWithValue("@FROM_DATE", fromDate);
                dAd.SelectCommand.Parameters.AddWithValue("@TO_DATE", toDate);
                dAd.Fill(dSet, "Receipt_For_Tds_Update");
                return dSet.Tables["Receipt_For_Tds_Update"];
            }
            catch
            {
                throw;
            }
            finally
            {
                dSet.Dispose();
                dAd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }
        public decimal UPDATE_RECEIPT_TDS(VM_ReceiptTdsUpdate rtu)
        {
            decimal RET_ID = 0;
            SqlConnection conn = new SqlConnection(logisConnStr);
            conn.Open();
            mytrans = conn.BeginTransaction();
            SqlCommand dCmd1 = null;
            try
            {
                dCmd1 = new SqlCommand("[DBO].[USP_UPDATE_ADVANCE_RECEIPT_TDS]", conn);
                dCmd1.CommandType = CommandType.StoredProcedure;
                dCmd1.Transaction = mytrans;

                SqlParameter sqlp1 = new SqlParameter();
                sqlp1 = dCmd1.Parameters.Add("@RET_ID", SqlDbType.Decimal);
                sqlp1.Direction = ParameterDirection.Output;

                SqlParameter sqlp2 = new SqlParameter();
                sqlp2 = dCmd1.Parameters.Add("@ERR_MSG", SqlDbType.VarChar,150);
                sqlp2.Direction = ParameterDirection.Output;

                dCmd1.Parameters.AddWithValue("@ADV_DTL_ID", rtu.ADV_DTL_ID);
                dCmd1.Parameters.AddWithValue("@ADV_ID", rtu.ADV_ID);
                dCmd1.Parameters.AddWithValue("@AMOUNT", rtu.Amount);
                dCmd1.Parameters.AddWithValue("@TDS_AMOUNT", rtu.TdsAmount);
                dCmd1.Parameters.AddWithValue("@TOTAL_AMOUNT", rtu.TotalAmount);
                dCmd1.Parameters.AddWithValue("@REMARKS", rtu.Remarks);
                dCmd1.Parameters.AddWithValue("@ADDED_BY", HttpContext.Current.Session["EmployeeCode"].ToString());

                dCmd1.ExecuteNonQuery();

                RET_ID = (decimal)dCmd1.Parameters["@RET_ID"].Value;
                rtu.ErrMsg = (string)dCmd1.Parameters["@ERR_MSG"].Value;

                if (RET_ID > 0)
                {
                    mytrans.Commit();
                }
                else
                {
                    mytrans.Rollback();
                }
            }
            catch
            {
                mytrans.Rollback();
                throw;
            }
            finally
            {
                dCmd1.Dispose();
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
                conn.Dispose();
            }
            return RET_ID;
        }
        #endregion

        #region Job Order Container Update
        public DataTable SELECT_JOB_ORDER_DETAILS_FOR_CONT_UPDATE(string branch, string jobCode)
        {
            SqlConnection conn = new SqlConnection(logisConnStr);
            SqlDataAdapter dAd = new SqlDataAdapter("USP_SELECT_JOB_ORDER_DETAILS_FOR_CONT_UPDATE", conn);
            dAd.SelectCommand.CommandType = CommandType.StoredProcedure;
            DataSet dSet = new DataSet();
            try
            {
                dAd.SelectCommand.Parameters.AddWithValue("@BRANCH_CODE", branch);
                dAd.SelectCommand.Parameters.AddWithValue("@JOB_CODE", jobCode);
                dAd.Fill(dSet, "JOB_ORDER_DETAILS_FOR_CONT_UPDATE");
                return dSet.Tables["JOB_ORDER_DETAILS_FOR_CONT_UPDATE"];
            }
            catch
            {
                throw;
            }
            finally
            {
                dSet.Dispose();
                dAd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }
        public decimal UPDATE_JOB_ORDER_CONT_NO(VM_JobOrderContainerUpdate jcu)
        {
            decimal RET_ID = 0;
            SqlConnection conn = new SqlConnection(logisConnStr);
            conn.Open();
            mytrans = conn.BeginTransaction();
            SqlCommand dCmd1 = null;
            try
            {
                dCmd1 = new SqlCommand("[DBO].[USP_UPDATE_JOB_ORDER_CONT_NO]", conn);
                dCmd1.CommandType = CommandType.StoredProcedure;
                dCmd1.Transaction = mytrans;

                SqlParameter sqlp1 = new SqlParameter();
                sqlp1 = dCmd1.Parameters.Add("@RET_ID", SqlDbType.Decimal);
                sqlp1.Direction = ParameterDirection.Output;

                SqlParameter sqlp2 = new SqlParameter();
                sqlp2 = dCmd1.Parameters.Add("@ERR_MSG", SqlDbType.VarChar, 150);
                sqlp2.Direction = ParameterDirection.Output;

                dCmd1.Parameters.AddWithValue("@JOB_ID", jcu.Job_Id);
                dCmd1.Parameters.AddWithValue("@CONT_NO", jcu.New_Cont_No);
                dCmd1.Parameters.AddWithValue("@REMARKS", jcu.Remarks);
                dCmd1.Parameters.AddWithValue("@ADDED_BY", HttpContext.Current.Session["EmployeeCode"].ToString());

                dCmd1.ExecuteNonQuery();

                RET_ID = (decimal)dCmd1.Parameters["@RET_ID"].Value;
                jcu.ErrMsg = (string)dCmd1.Parameters["@ERR_MSG"].Value;

                if (RET_ID > 0)
                {
                    mytrans.Commit();
                }
                else
                {
                    mytrans.Rollback();
                }
            }
            catch
            {
                mytrans.Rollback();
                throw;
            }
            finally
            {
                dCmd1.Dispose();
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
                conn.Dispose();
            }
            return RET_ID;
        }
        #endregion

        #region Bill Transport Charge Update
        public DataSet SELECT_BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE(string branch, string billNo)
        {
            SqlConnection conn = new SqlConnection(logisConnStr);
            SqlDataAdapter dAd = new SqlDataAdapter("USP_SELECT_BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE", conn);
            dAd.SelectCommand.CommandType = CommandType.StoredProcedure;
            DataSet dSet = new DataSet();
            try
            {
                dAd.SelectCommand.Parameters.AddWithValue("@BRANCH_CODE", branch);
                dAd.SelectCommand.Parameters.AddWithValue("@BILL_NO", billNo);
                dAd.Fill(dSet, "BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE");
                return dSet;
            }
            catch
            {
                throw;
            }
            finally
            {
                dSet.Dispose();
                dAd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }

        public decimal UPDATE_BILL_TRANSPORT_CHARGE(VM_BillTransportChargeUpdate bcu)
        {
            decimal RET_ID = 0;
            SqlConnection conn = new SqlConnection(logisConnStr);
            conn.Open();
            mytrans = conn.BeginTransaction();
            SqlCommand dCmd1 = null;
            try
            {
                dCmd1 = new SqlCommand("[dbo].[USP_UPDATE_BILL_TRANSPORT_CHARGE]", conn);
                dCmd1.CommandType = CommandType.StoredProcedure;
                dCmd1.Transaction = mytrans;

                SqlParameter sqlp1 = new SqlParameter();
                sqlp1 = dCmd1.Parameters.Add("@RET_ID", SqlDbType.Decimal);
                sqlp1.Direction = ParameterDirection.Output;

                SqlParameter sqlp2 = new SqlParameter();
                sqlp2 = dCmd1.Parameters.Add("@ERR_MSG", SqlDbType.VarChar, 150);
                sqlp2.Direction = ParameterDirection.Output;

                dCmd1.Parameters.AddWithValue("@BILL_ID", bcu.Bill_Id);
                dCmd1.Parameters.AddWithValue("@BILL_NO", bcu.Bill_No);

                dCmd1.Parameters.AddWithValue("@AMOUNT", bcu.AMOUNT);
                dCmd1.Parameters.AddWithValue("@HALT_AMT", (bcu.HALT_AMT == null) ? (object)DBNull.Value : bcu.HALT_AMT);
                dCmd1.Parameters.AddWithValue("@OTHER_AMT", (bcu.OTHER_AMT == null) ? (object)DBNull.Value : bcu.OTHER_AMT);
                dCmd1.Parameters.AddWithValue("@DISCOUNT_AMT", (bcu.DISCOUNT_AMT == null) ? (object)DBNull.Value : bcu.DISCOUNT_AMT);
                dCmd1.Parameters.AddWithValue("@STATISTICAL_CHARGES", (bcu.STATISTICAL_CHARGES == null) ? (object)DBNull.Value : bcu.STATISTICAL_CHARGES);
                dCmd1.Parameters.AddWithValue("@BILL_AMT", bcu.BILL_AMT);

                dCmd1.Parameters.AddWithValue("@AMOUNT_INWORDS", bcu.Amt_In_Words);
                dCmd1.Parameters.AddWithValue("@ADDED_BY", HttpContext.Current.Session["EmployeeCode"].ToString());

                dCmd1.ExecuteNonQuery();

                RET_ID = (decimal)dCmd1.Parameters["@RET_ID"].Value;
                bcu.ErrMsg = (string)dCmd1.Parameters["@ERR_MSG"].Value;

                foreach (VM_Bill_Dtls dtls in bcu.Bill_Dtls_List)
                {
                    if (dtls.IsChecked)
                    {
                        dCmd1 = new SqlCommand("[dbo].[USP_UPDATE_BILL_TRANSPORT_CHARGE_DTLS]", conn);
                        dCmd1.CommandType = CommandType.StoredProcedure;
                        dCmd1.Transaction = mytrans;

                        SqlParameter sqlp3 = new SqlParameter();
                        sqlp3 = dCmd1.Parameters.Add("@RET_ID", SqlDbType.Decimal);
                        sqlp3.Direction = ParameterDirection.Output;

                        SqlParameter sqlp4 = new SqlParameter();
                        sqlp4 = dCmd1.Parameters.Add("@ERR_MSG", SqlDbType.VarChar, 150);
                        sqlp4.Direction = ParameterDirection.Output;


                        dCmd1.Parameters.AddWithValue("@BILL_ID", (dtls.BILL_ID == null) ? (object)DBNull.Value : dtls.BILL_ID);
                        dCmd1.Parameters.AddWithValue("@BILL_Det_ID", (dtls.BILL_Det_ID == null) ? (object)DBNull.Value : dtls.BILL_Det_ID);
                        dCmd1.Parameters.AddWithValue("@AMOUNT", (dtls.AMOUNT == null) ? (object)DBNull.Value : dtls.AMOUNT);
                        dCmd1.Parameters.AddWithValue("@HALT_AMT", (dtls.HALT_AMT == null) ? (object)DBNull.Value : dtls.HALT_AMT);
                        dCmd1.Parameters.AddWithValue("@OTHER_AMT", (dtls.OTHER_AMT == null) ? (object)DBNull.Value : dtls.OTHER_AMT);
                        dCmd1.Parameters.AddWithValue("@DISCOUNT_AMT", (dtls.DISCOUNT_AMT == null) ? (object)DBNull.Value : dtls.DISCOUNT_AMT);
                        dCmd1.Parameters.AddWithValue("@STATISTICAL_CHARGES", (dtls.STATISTICAL_CHARGES == null) ? (object)DBNull.Value : dtls.STATISTICAL_CHARGES);
                        dCmd1.Parameters.AddWithValue("@TOTAL_AMT", (dtls.TOTAL_AMT == null) ? (object)DBNull.Value : dtls.TOTAL_AMT);

                        dCmd1.Parameters.AddWithValue("@CN_ID", (dtls.CN_ID == null) ? (object)DBNull.Value : dtls.CN_ID);
                        dCmd1.Parameters.AddWithValue("@JOB_ID", (dtls.JOB_ID == null) ? (object)DBNull.Value : dtls.JOB_ID);
                        dCmd1.Parameters.AddWithValue("@LP_ID", (dtls.LP_ID == null) ? (object)DBNull.Value : dtls.LP_ID);
                        dCmd1.Parameters.AddWithValue("@NO_OF_TRUCK", (dtls.NO_OF_TRUCK == null) ? (object)DBNull.Value : dtls.NO_OF_TRUCK);
                        dCmd1.Parameters.AddWithValue("@AMOUNT_IN_WORDS", (dtls.Amt_In_Words == null) ? (object)DBNull.Value : dtls.Amt_In_Words);
                        dCmd1.Parameters.AddWithValue("@ADDED_BY", HttpContext.Current.Session["EmployeeCode"].ToString());

                        dCmd1.ExecuteNonQuery();

                        RET_ID = (decimal)dCmd1.Parameters["@RET_ID"].Value;
                        bcu.ErrMsg = (string)dCmd1.Parameters["@ERR_MSG"].Value;

                        if (RET_ID == -1) break;
                    }
                }

                if (RET_ID > 0)
                {
                    mytrans.Commit();
                }
                else
                {
                    mytrans.Rollback();
                }
            }
            catch
            {
                mytrans.Rollback();
                throw;
            }
            finally
            {
                dCmd1.Dispose();
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
                conn.Dispose();
            }
            return RET_ID;
        }

        #endregion

        #region JOB_DETAILS_FOR_UPDATE

        //________________________________________________________SHOW_____________________________________________________________


        public DataTable JOB_DETAILS_FOR_UPDATE(string JOB_CODE, string LOGIN_BRANCH_CODE, string EMPLOYEE_CODE)
        {
            SqlConnection conn = new SqlConnection(logisConnStr);
            SqlDataAdapter dAd = new SqlDataAdapter("[Log].[USP_SELECT_JOB_DETAILS_FOR_UPDATE]", conn);
            dAd.SelectCommand.CommandType = CommandType.StoredProcedure;
            DataSet dSet = new DataSet();
            try
            {
                dAd.SelectCommand.Parameters.AddWithValue("@JOB_CODE", JOB_CODE);
                dAd.SelectCommand.Parameters.AddWithValue("@LOGIN_BRANCH_CODE", LOGIN_BRANCH_CODE);
                dAd.SelectCommand.Parameters.AddWithValue("@EMP_CODE", EMPLOYEE_CODE);

                dAd.Fill(dSet, "Tbl_JobDetails");
                return dSet.Tables["Tbl_JobDetails"];
            }
            catch
            {
                throw;
            }
            finally
            {
                dSet.Dispose();
                dAd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }


//_____________________________________________________________UPDATE__________________________________________________________


        public string UPDATE_JOB_ORDER_DETAILS(VM_Job_Update bcu)
        {
            string ErrMsg = "";
              
            SqlConnection conn = new SqlConnection(logisConnStr);
            conn.Open();
            mytrans = conn.BeginTransaction();
            SqlCommand dCmd1 = null;
            try
            {
                dCmd1 = new SqlCommand("[Log].[USP_UPDATE_JOB_ORDER_CORRECTION]", conn);
                dCmd1.CommandType = CommandType.StoredProcedure;
                dCmd1.Transaction = mytrans;
                 
                SqlParameter sqlp2 = new SqlParameter();
                sqlp2 = dCmd1.Parameters.Add("@ERRORSTR", SqlDbType.VarChar, 200);
                sqlp2.Direction = ParameterDirection.Output;

                dCmd1.Parameters.AddWithValue("@JOB_ID", bcu.JobId);
                dCmd1.Parameters.AddWithValue("@ACTION", bcu.Action);
                dCmd1.Parameters.AddWithValue("@CUST_ID", ( bcu.CustomerID==null)?(object)DBNull.Value:  bcu.CustomerID) ;

                dCmd1.Parameters.AddWithValue("@MOVE_FOR", (bcu.MoveFor == null) ? (object)DBNull.Value : bcu.MoveFor);
                dCmd1.Parameters.AddWithValue("@FREIGHT_RATE", (bcu.FreightID == null) ? (object)DBNull.Value : bcu.FreightID);
                dCmd1.Parameters.AddWithValue("@TRAILER_RENT", (bcu.TrailerID == null) ? (object)DBNull.Value : bcu.TrailerID);
               

                dCmd1.Parameters.AddWithValue("@REMARKS", bcu.Remark);
                dCmd1.Parameters.AddWithValue("@EMP_CODE", Convert.ToString(HttpContext.Current.Session["EmployeeCode"]));
                dCmd1.ExecuteNonQuery();
                ErrMsg = (string)dCmd1.Parameters["@ERRORSTR"].Value;

                if (ErrMsg =="")
                {
                    mytrans.Commit();
                }
                else
                {
                    mytrans.Rollback();
                }
            }
            catch
            {
                mytrans.Rollback();
                throw;
            }
            finally
            {
                dCmd1.Dispose();
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
                conn.Dispose();
            }
            return ErrMsg;
        }

     #endregion   


        
        
        
        
        
        
        
        
        //______________________________________________________BillGSTUpdate For Show_______________________________________________________________
       
        
        #region 

        public DataSet BillGSTUpdate(string BRANCH_CODE , string BILL_NO)
        {
            SqlConnection conn = new SqlConnection(logisConnStr);
            SqlDataAdapter dAd = new SqlDataAdapter("USP_SELECT_BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE", conn);
            dAd.SelectCommand.CommandType = CommandType.StoredProcedure;
            DataSet dSet = new DataSet();
            try
            {
                dAd.SelectCommand.Parameters.AddWithValue("@BILL_NO", BILL_NO);
                dAd.SelectCommand.Parameters.AddWithValue("@BRANCH_CODE", BRANCH_CODE);

                dAd.Fill(dSet, "BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE");
                return dSet;
            }
            catch
            {
                throw;
            }
            finally
            {
                dSet.Dispose();
                dAd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }


        //______________________________________________________BillGSTUpdate For Update_______________________________________________________________


        public string BillGSTUpdateSubmit(VM_BillGSTUpdate bcu)
        {
            string ErrMsg = "";

            SqlConnection conn = new SqlConnection(logisConnStr);
            conn.Open();
            mytrans = conn.BeginTransaction();
            SqlCommand dCmd1 = null;
            try
            {
                dCmd1 = new SqlCommand("[Log].[USP_SELECT_BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE]", conn);
                dCmd1.CommandType = CommandType.StoredProcedure;
                dCmd1.Transaction = mytrans;

                SqlParameter sqlp2 = new SqlParameter();
                sqlp2 = dCmd1.Parameters.Add("@ERRORSTR", SqlDbType.VarChar, 200);
                sqlp2.Direction = ParameterDirection.Output;

                dCmd1.Parameters.AddWithValue("@BILL_NO", bcu.BILL_NO);
                dCmd1.Parameters.AddWithValue("@BILL_DATE", bcu.BILL_DATE);
                dCmd1.Parameters.AddWithValue("@AMOUNT", bcu.AMOUNT);
               
                dCmd1.Parameters.AddWithValue("@CUST_NAME", (bcu.prev_CustomerName == null) ? (object)DBNull.Value : bcu.prev_CustomerName);
                dCmd1.Parameters.AddWithValue("@GSTIN", (bcu.prev_GST_No == null) ? (object)DBNull.Value : bcu.prev_GST_No);
                dCmd1.Parameters.AddWithValue("@PARTY_ADDRESS", (bcu.prev_Address == null) ? (object)DBNull.Value : bcu.prev_Address);




                dCmd1.ExecuteNonQuery();
                ErrMsg = (string)dCmd1.Parameters["@ERRORSTR"].Value;

                if (ErrMsg == "")
                {
                    mytrans.Commit();
                }
                else
                {
                    mytrans.Rollback();
                }
            }
            catch
            {
                mytrans.Rollback();
                throw;
            }
            finally
            {
                dCmd1.Dispose();
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
                conn.Dispose();
            }
            return ErrMsg;
        }


        #endregion

    }
}
____________________________________________________ErrorController.cs___________________________________________________________________________

using MVCConsignment.App_Code;
using MVCConsignment.App_Code.FAMS;
using MVCConsignment.Models;
using MVCConsignment.UnitOfWorks;
using MVCConsignment.ViewModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Text;
using System.Web.Mvc;

namespace MVCConsignment.Controllers
{
    public class ErrorController : BaseController
    {
        CALYX_LOGISEntities db = null;
        IUnitOfWork UOW = null;
        DAL_ERROR err_DAL = new DAL_ERROR();
        string LOGIN_BRANCH = "";
        public ErrorController(DbContext db1, IUnitOfWork iow)
        {
            UOW = iow;
            db = (CALYX_LOGISEntities)db1;

            if (System.Web.HttpContext.Current.Session["UserCredentials"] != null)
            {
                SP_LogIn_Result LogIn = (SP_LogIn_Result)System.Web.HttpContext.Current.Session["UserCredentials"];
                if (LogIn != null)
                {
                    LOGIN_BRANCH = LogIn.Branch_Code;
                }
            }
        }

        #region Advance Receipt Tds Update

        public ActionResult ReceiptTdsUpdate()
        {
            ViewBag.Header = "Receipt Tds Update";
            VM_ReceiptTdsUpdate rtu = new VM_ReceiptTdsUpdate();
            if (TempData["PartyId"] != null)
            {
                rtu.PartyId = Convert.ToInt32(TempData["PartyId"]);
                rtu.ReceiptFor = Convert.ToString(TempData["ReceiptFor"]);
                rtu.FromDate = Convert.ToDateTime(TempData["FromDate"]);
                rtu.ToDate = Convert.ToDateTime(TempData["ToDate"]);
                Receipt_For_Tds_Update(rtu);
                ModelState.Clear();
            }
            return View(rtu);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReceiptTdsUpdate(VM_ReceiptTdsUpdate rtu)
        {
            ViewBag.Header = "Receipt Tds Update";

            if (rtu.Action == "Submit")
            {
                decimal result = 0;
                foreach (var item in rtu.Result)
                {
                    if (item.IsChecked)
                    {
                        result = err_DAL.UPDATE_RECEIPT_TDS(rtu);
                    }
                }

                if (result > 0)
                {
                    Success(string.Format("<b>Updation is done successfully.</b>"), true);
                }
                else if ((rtu.ErrMsg ?? "").Trim() != "")
                {
                    Danger(string.Format("<b>" + rtu.ErrMsg + "</b>"), true);
                }
                else
                {
                    Danger(string.Format("<b>Updation is not done.</b>"), true);
                }

                TempData["PartyId"] = rtu.PartyId;
                TempData.Keep("PartyId");

                TempData["ReceiptFor"] = rtu.ReceiptFor;
                TempData.Keep("ReceiptFor");

                TempData["FromDate"] = rtu.FromDate;
                TempData.Keep("FromDate");

                TempData["ToDate"] = rtu.ToDate;
                TempData.Keep("ToDate");

                return RedirectToAction("ReceiptTdsUpdate");
            }

            Receipt_For_Tds_Update(rtu);
            ModelState.Clear();
            return View(rtu);
        }

        private void Receipt_For_Tds_Update(VM_ReceiptTdsUpdate rtu)
        {
            DataTable dt = err_DAL.Fill_Receipt_For_Tds_Update(LOGIN_BRANCH, rtu.PartyId, rtu.FromDate.Value.ToString("dd/MM/yyyy"), rtu.ToDate.Value.ToString("dd/MM/yyyy"));
            List<VM_Receipt_For_Tds_Update> dtl = new List<VM_Receipt_For_Tds_Update>();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow row in dt.Rows)
                {
                    dtl.Add(new VM_Receipt_For_Tds_Update
                    {
                        SrNO = Convert.ToInt32(row["SrNO"] == DBNull.Value ? "0" : row["SrNO"]),
                        ADV_ID = Convert.ToDecimal(row["ADV_ID"] == DBNull.Value ? "0" : row["ADV_ID"]),
                        RECEIPT_DATE = Convert.ToString(row["RECEIPT_DATE"] == DBNull.Value ? "" : row["RECEIPT_DATE"]),
                        PAY_MODE = Convert.ToString(row["PAY_MODE"] == DBNull.Value ? "" : row["PAY_MODE"]),
                        PAY_DETAILS = Convert.ToString(row["PAY_DETAILS"] == DBNull.Value ? "" : row["PAY_DETAILS"]),
                        CHQ_RTGS_DD_NO = Convert.ToString(row["CHQ_RTGS_DD_NO"] == DBNull.Value ? "" : row["CHQ_RTGS_DD_NO"]),
                        CHQ_RTGS_DD_DATE = Convert.ToString(row["CHQ_RTGS_DD_DATE"] == DBNull.Value ? "" : row["CHQ_RTGS_DD_DATE"]),
                        BANKNAME = Convert.ToString(row["BANKNAME"] == DBNull.Value ? "" : row["BANKNAME"]),
                        AMOUNT = Convert.ToDecimal(row["AMOUNT"] == DBNull.Value ? "0" : row["AMOUNT"]),
                        TDS_AMOUNT = Convert.ToDecimal(row["TDS_AMOUNT"] == DBNull.Value ? "0" : row["TDS_AMOUNT"]),
                        TOTAL_AMOUNT = Convert.ToDecimal(row["TOTAL_AMOUNT"] == DBNull.Value ? "0" : row["TOTAL_AMOUNT"]),
                        ADV_DTL_ID = Convert.ToDecimal(row["ADV_DTL_ID"] == DBNull.Value ? "0" : row["ADV_DTL_ID"]),
                    });
                }
            }
            rtu.Result = dtl;
        }

        #endregion

        #region Job Order Container Update

        public ActionResult JobOrderContainerUpdate()
        {
            ViewBag.Header = "Job Order Container Update";
            VM_JobOrderContainerUpdate jcu = new VM_JobOrderContainerUpdate();
            if (TempData["Job_Order_No"] != null)
            {
                jcu.Search_Job_No = Convert.ToString(TempData["Job_Order_No"]);
                Jobs_For_Container_Update(jcu);
                ModelState.Clear();
            }
            return View(jcu);
        }

        private void Jobs_For_Container_Update(VM_JobOrderContainerUpdate jcu)
        {
            DataTable dt = err_DAL.SELECT_JOB_ORDER_DETAILS_FOR_CONT_UPDATE(LOGIN_BRANCH, jcu.Search_Job_No);
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow row in dt.Rows)
                {
                    jcu.Job_Id = Convert.ToDecimal(row["JOB_ID"] == DBNull.Value ? "0" : row["JOB_ID"]);
                    jcu.BookingBranch = Convert.ToString(row["BOOKING_BRANCH"] == DBNull.Value ? "" : row["BOOKING_BRANCH"]);
                    jcu.Curr_Cont_No = Convert.ToString(row["CONT_NO_1"] == DBNull.Value ? "" : row["CONT_NO_1"]);
                    jcu.ErrMsg = Convert.ToString(row["ERROR_MSG"] == DBNull.Value ? "" : row["ERROR_MSG"]);
                    jcu.Job_No = Convert.ToString(row["job_code"] == DBNull.Value ? "" : row["job_code"]);
                    jcu.Job_Date = Convert.ToString(row["JOB_DATE"] == DBNull.Value ? "" : row["JOB_DATE"]);
                }
            }

            if ((jcu.ErrMsg ?? "").Trim() != "")
            {
                jcu.Job_Id = 0;
                Danger(string.Format("<b>" + jcu.ErrMsg + "</b>"), true);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult JobOrderContainerUpdate(VM_JobOrderContainerUpdate jcu)
        {
            ViewBag.Header = "Job Order Container Update";

            if (jcu.Action == "Submit")
            {
                decimal result = 0;

                result = err_DAL.UPDATE_JOB_ORDER_CONT_NO(jcu);

                if (result > 0)
                {
                    Success(string.Format("<b>Updation is done successfully.</b>"), true);
                }
                else if ((jcu.ErrMsg ?? "").Trim() != "")
                {
                    Danger(string.Format("<b>" + jcu.ErrMsg + "</b>"), true);
                }
                else
                {
                    Danger(string.Format("<b>Updation is not done.</b>"), true);
                }

                TempData["Job_Order_No"] = jcu.Search_Job_No;
                TempData.Keep("Job_Order_No");

                return RedirectToAction("JobOrderContainerUpdate");
            }

            Jobs_For_Container_Update(jcu);
            ModelState.Clear();
            return View(jcu);
        }

        #endregion

        #region Bill Transport Charge Update
        public ActionResult BillTransportChargeUpdate()
        {
            ViewBag.Header = "Bill Transport Charge Update";
            VM_BillTransportChargeUpdate bcu = new VM_BillTransportChargeUpdate();
            if (TempData["Bill_No"] != null)
            {
                bcu.Search_Bill_No = Convert.ToString(TempData["Bill_No"]);
                Bill_For_Transport_Charge_Update(bcu);
                ModelState.Clear();
            }
            return View(bcu);
        }

        private void Bill_For_Transport_Charge_Update(VM_BillTransportChargeUpdate bcu)
        {
            DataSet ds = err_DAL.SELECT_BILL_DETAILS_FOR_TRANSPORT_CHARGE_UPDATE(LOGIN_BRANCH, bcu.Search_Bill_No);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    bcu.Bill_Id = Convert.ToDecimal(row["BILL_ID"] == DBNull.Value ? "0" : row["BILL_ID"]);
                    bcu.LoginBranch = Convert.ToString(row["LOGIN_BRANCH"] == DBNull.Value ? "" : row["LOGIN_BRANCH"]);
                    bcu.Bill_No = Convert.ToString(row["BILL_NO"] == DBNull.Value ? "" : row["BILL_NO"]);
                    bcu.Bill_Date = Convert.ToString(row["BILL_DATE"] == DBNull.Value ? "" : row["BILL_DATE"]);
                    bcu.Prev_AMOUNT = Convert.ToDecimal(row["AMOUNT"] == DBNull.Value ? "0" : row["AMOUNT"]);
                    bcu.Prev_BILL_AMT = Convert.ToDecimal(row["BILL_AMT"] == DBNull.Value ? "0" : row["BILL_AMT"]);
                    bcu.Prev_Amt_In_Words = Convert.ToString(row["AMOUNT_INWORDS"] == DBNull.Value ? "" : row["AMOUNT_INWORDS"]);
                    bcu.ErrMsg = Convert.ToString(row["ERROR_MSG"] == DBNull.Value ? "" : row["ERROR_MSG"]);
                }

                if (ds.Tables.Count > 1)
                {
                    List<VM_Bill_Dtls> dtl = new List<VM_Bill_Dtls>();
                    int i = 0;
                    foreach (DataRow row in ds.Tables[1].Rows)
                    {
                        dtl.Add(new VM_Bill_Dtls
                        {
                            SrNO = ++i,
                            BILL_ID = Convert.ToDecimal(row["BILL_ID"] == DBNull.Value ? "0" : row["BILL_ID"]),
                            BILL_Det_ID = Convert.ToDecimal(row["BILL_Det_ID"] == DBNull.Value ? "0" : row["BILL_Det_ID"]),
                            CN_CODE = Convert.ToString(row["CN_CODE"] == DBNull.Value ? "" : row["CN_CODE"]),
                            AMOUNT = Convert.ToDecimal(row["AMOUNT"] == DBNull.Value ? "0" : row["AMOUNT"]),
                            HALT_AMT = Convert.ToDecimal(row["HALT_AMT"] == DBNull.Value ? "0" : row["HALT_AMT"]),
                            OTHER_AMT = Convert.ToDecimal(row["OTHER_AMT"] == DBNull.Value ? "0" : row["OTHER_AMT"]),
                            DISCOUNT_AMT = Convert.ToDecimal(row["DISCOUNT_AMT"] == DBNull.Value ? "0" : row["DISCOUNT_AMT"]),
                            STATISTICAL_CHARGES = Convert.ToDecimal(row["STATISTICAL_CHARGES"] == DBNull.Value ? "0" : row["STATISTICAL_CHARGES"]),
                            PREV_AMOUNT = Convert.ToDecimal(row["AMOUNT"] == DBNull.Value ? "0" : row["AMOUNT"]),
                            PREV_HALT_AMT = Convert.ToDecimal(row["HALT_AMT"] == DBNull.Value ? "0" : row["HALT_AMT"]),
                            PREV_OTHER_AMT = Convert.ToDecimal(row["OTHER_AMT"] == DBNull.Value ? "0" : row["OTHER_AMT"]),
                            PREV_DISCOUNT_AMT = Convert.ToDecimal(row["DISCOUNT_AMT"] == DBNull.Value ? "0" : row["DISCOUNT_AMT"]),
                            PREV_STATISTICAL_CHARGES = Convert.ToDecimal(row["STATISTICAL_CHARGES"] == DBNull.Value ? "0" : row["STATISTICAL_CHARGES"]),
                            TOTAL_AMT = Convert.ToDecimal(row["TOTAL_AMT"] == DBNull.Value ? "0" : row["TOTAL_AMT"]),

                            CN_ID = Convert.ToDecimal(row["CN_ID"] == DBNull.Value ? "0" : row["CN_ID"]),
                            JOB_ID = Convert.ToDecimal(row["JOB_ID"] == DBNull.Value ? "0" : row["JOB_ID"]),
                            LP_ID = Convert.ToDecimal(row["LP_ID"] == DBNull.Value ? "0" : row["LP_ID"]),
                            NO_OF_TRUCK = Convert.ToDecimal(row["NO_OF_TRUCK"] == DBNull.Value ? "0" : row["NO_OF_TRUCK"]),

                            JOB_CODE = Convert.ToString(row["JOB_CODE"] == DBNull.Value ? "" : row["JOB_CODE"]),

                        });
                    }
                    bcu.Bill_Dtls_List = dtl;
                }
            }

            if ((bcu.ErrMsg ?? "").Trim() != "")
            {
                bcu.Bill_Id = 0;
                Danger(string.Format("<b>" + bcu.ErrMsg + "</b>"), true);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult BillTransportChargeUpdate(VM_BillTransportChargeUpdate bcu)
        {
            ViewBag.Header = "Bill Transport Charge Update";

            if (bcu.Action == "Submit")
            {
                decimal result = 0;

                if (bcu.Bill_Dtls_List != null)
                {
                    int flag = 0;
                    foreach (var item in bcu.Bill_Dtls_List)
                    {
                        if (item.IsChecked)
                        {
                            flag = 1;
                        }
                    }
                    if (flag > 0)
                    {
                        result = err_DAL.UPDATE_BILL_TRANSPORT_CHARGE(bcu);
                    }
                }

                if (result > 0)
                {
                    Success(string.Format("<b>Updation is done successfully.</b>"), true);
                }
                else if ((bcu.ErrMsg ?? "").Trim() != "")
                {
                    Danger(string.Format("<b>" + bcu.ErrMsg + "</b>"), true);
                }
                else
                {
                    Danger(string.Format("<b>Updation is not done.</b>"), true);
                }

                TempData["Bill_No"] = bcu.Bill_No;
                TempData.Keep("Bill_No");

                return RedirectToAction("BillTransportChargeUpdate");
            }

            Bill_For_Transport_Charge_Update(bcu);
            ModelState.Clear();
            return View(bcu);
        }

        #endregion
     
        #region JobUpdate

        public ActionResult JobUpdate()
        {
            ViewBag.Header = "Job Update";

            VM_Job_Update objJobUpdate = new VM_Job_Update();
            objJobUpdate.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_CODE", "CUST_NAME");
            return View(objJobUpdate);

        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SubmitButtonSelector(Name = "Show")]
        [ActionName("JobUpdate")]
        public ActionResult JobUpdate(VM_Job_Update objJobUpdate)
        {
            ViewBag.Header = "Job Update";

            objJobUpdate.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_ID", "CUST_NAME");

            DataTable dt = err_DAL.JOB_DETAILS_FOR_UPDATE(objJobUpdate.JobCode, LOGIN_BRANCH, Convert.ToString(HttpContext.Session["EmployeeCode"]));

            if (dt.Rows.Count > 0)
            {
                objJobUpdate.JobId = Convert.ToDecimal(dt.Rows[0]["JOB_ID"]);
                objJobUpdate.OldCustomerName = Convert.ToString(dt.Rows[0]["CUST_NAME"]);
                objJobUpdate.OldMoveFor = Convert.ToString(dt.Rows[0]["MOVE_FOR"]);
                objJobUpdate.OldFreightRate = Convert.ToString(dt.Rows[0]["FREIGHT_RATE"]);
                objJobUpdate.OldTrailerRent = Convert.ToString(dt.Rows[0]["TRAILER_RENT"]);
            }

            ModelState.Clear();
            return View(objJobUpdate);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        [SubmitButtonSelector(Name = "save")]
        [ActionName("JobUpdate")]
        public ActionResult UPDATE_JOB_ORDER_DETAILS(VM_Job_Update bcu)
        {
            ViewBag.Header = "Job Order Details Update";

            string result = err_DAL.UPDATE_JOB_ORDER_DETAILS(bcu);
            if (result == "")
            {
                Success(string.Format("<b>Updation is done successfully.</b>"), true);
            }
            else
            {
                Danger(string.Format("<b>Updation is not done.</b>"), true);
            }

            bcu.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_CODE", "CUST_NAME");
            bcu.Action = "";

            ModelState.Clear();
            return View(bcu);
        }

        #endregion



        // ________________________________________________________________Bill GST UPDATE___________________________________________________________


        #region BillGSTUpdate

        public ActionResult BillGSTUpdate()
        {
            ViewBag.Header = "Bill No Update";
            VM_BillGSTUpdate bcu = new VM_BillGSTUpdate();
            bcu.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_CODE", "CUST_NAME");

        if (TempData["Bill_No"] != null)
            {
                bcu.Search_Bill_No = Convert.ToString(TempData["Bill_No"]);
               
                BillGSTUpdate(bcu);
                ModelState.Clear();
            }
            return View(bcu);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        [SubmitButtonSelector(Name = "Show")]
        [ActionName("BillGSTUpdate")]
        public ActionResult BillGSTUpdate(VM_BillGSTUpdate bcu)
        {
             bcu.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_ID", "CUST_NAME");
            
            DataSet ds = err_DAL.BillGSTUpdate(LOGIN_BRANCH, bcu.Search_Bill_No);
            if (ds.Tables.Count > 0)
            {
                ViewBag.Header = "BillGSTUpdate";
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        bcu.BILL_NO = Convert.ToString(row["BILL_NO"] == DBNull.Value ? "" : row["BILL_NO"]);
                        bcu.BILL_DATE = Convert.ToString(row["BILL_DATE"] == DBNull.Value ? "" : row["BILL_DATE"]);
                        bcu.AMOUNT = Convert.ToDecimal(row["AMOUNT"] == DBNull.Value ? "0" : row["AMOUNT"]);

                        bcu.prev_CustomerName = Convert.ToString(row["CUST_NAME"] == DBNull.Value ? "0" : row["CUST_NAME"]);
                        bcu.prev_GST_No = Convert.ToString(row["GSTIN"] == DBNull.Value ? "0" : row["GSTIN"]);
                        bcu.prev_Address = Convert.ToString(row["PARTY_ADDRESS"] == DBNull.Value ? "0" : row["PARTY_ADDRESS"]);


                    }
                 }
              }

                ModelState.Clear();
                return View(bcu);
     }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [SubmitButtonSelector(Name = "Update")]
        [ActionName("BillGSTUpdate")]
        public ActionResult BillGSTUpdateSubmit(VM_BillGSTUpdate bcu)
        {
            ViewBag.Header = "GST BILL UPDATE";

            string result = err_DAL.BillGSTUpdateSubmit(bcu);
            if (result == "")
            {
                Success(string.Format("<b>Updation is done successfully.</b>"), true);
            }
            else
            {
                Danger(string.Format("<b>Updation is not done.</b>"), true);
            }

            bcu.Customer_list = new SelectList(db.Tbl_Customer_Mst.OrderBy(x => x.CUST_NAME), "CUST_CODE", "CUST_NAME");
            //bcu.Action = "";

            ModelState.Clear();
            return View(bcu);
        }

        #endregion
    }
}



__________________________________________________________ConsignmentController.cs_____________________________________________________________________

using MVCConsignment.App_Code;
using MVCConsignment.Models;
using MVCConsignment.UnitOfWorks;
using MVCConsignment.ViewModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Linq;
using System.Web.Mvc;

namespace MVCConsignment.Controllers
{
    public class ConsignmentController : BaseController
    {
        CALYX_LOGISEntities db = null;
        IUnitOfWork UOW = null;
        CommonFunction comm = null;
        DAL_ConsignmentNote dalCN = new DAL_ConsignmentNote();
        //Logger logger = LogManager.GetCurrentClassLogger(); 
        HRMEntities dbHRM = null;

        public ConsignmentController(DbContext db1, IUnitOfWork iow)
        {
            UOW = iow;
            db = (CALYX_LOGISEntities)db1;
            comm = new CommonFunction(db, UOW);
            dbHRM = new HRMEntities();
        }

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult ConsignmentNoteEntry()
        {
            ViewBag.Header = "Consignment Note Entry";

            VM_ConsignmentNote CN = new VM_ConsignmentNote();
            CN.CNOR_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "1") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
            CN.CNEE_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "2") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
            CN.ProductDtls[0].PKG_list = new SelectList(db.Tbl_PKGType_Mst, "PKG_ID", "PKG_NAME");
            CN.PaymentDtls.Bank_list = new SelectList(db.Tbl_Bank_Mst, "BANKCODE", "BANKNAME");
            CN.INS_list = new SelectList(db.Tbl_InsuranceCompany_Mst, "INS_ID", "INS_NAME");
            CN.PayMode_list = new SelectList(db.Tbl_PAYMODE_Mst, "PMOD_ID", "PMOD_NAME", Convert.ToDecimal("3"));

            CN.LoadingPort_list = new SelectList(db.Tbl_PORT_MASTER.OrderBy(x => x.PORT_NAME), "PORT_ID", "PORT_NAME");
            CN.DischargePort_list = new SelectList(db.Tbl_PORT_MASTER.OrderBy(x => x.PORT_NAME), "PORT_ID", "PORT_NAME");
            CN.ContType_list = new SelectList(db.Tbl_ContainerType_Master, "CONT_TYPE_CODE", "CONT_TYPE_NAME", "DC");
            CN.BookingBranch_list = new SelectList(db.tbl_Branch_Master.OrderBy(x => x.Branch_Name), "BRANCH_CODE", "BRANCH_NAME", "BR00000002");

            SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
            //CN.BookingLocList = new SelectList(db.tbl_Location_Mst, "LOC_ID", "LOC_NAME");

            CN.BookingLocList = new SelectList(db.tbl_Location_Mst.Where(x => x.OUR_BRANCH == "Y" && x.LOGIN_BRANCH_CODE == LogIn.Branch_Code).OrderBy(x => x.LOC_NAME), "LOC_ID", "LOC_NAME", LogIn.Branch_Code);


            CN.Container_list = new SelectList(db.tbl_Truck_Type_Mst.OrderBy(o => o.TT_NAME), "TT_NAME", "TT_NAME");

            CN.MaterialTypeList = new SelectList(db.tbl_MaterialType_Mst.OrderBy(x => x.MT_NAME), "MT_NAME", "MT_NAME");
            CN.LocationList = new SelectList(comm.LocationList(), "Value", "Text");
            CN.CfsList = new SelectList(db.OTHER_CFS_MASTER.OrderBy(o => o.OTHER_CFS_NAME), "OTHER_CFS_CODE", "OTHER_CFS_NAME");
            CN.StuffingPointList = new SelectList(db.tbl_Pickup_Delivery_Mst.OrderBy(o => o.PD_NAME), "PD_ID", "PD_NAME");

            if (Session["EmployeeCode"] != null)
            {
                SP_LogIn_Result loggedIn = (SP_LogIn_Result)Session["UserCredentials"];
                CN.PostedBy = loggedIn.EmpName;
                CN.PaymentDay = 0;
                CN.SalesPersonList = new SelectList(dbHRM.vw_Employee_Mst.Where(x => x.Comp_Code == "CO00000001").OrderBy(x => x.Employee_Name), "Employee_Code", "Employee_Name", Session["EmployeeCode"].ToString());
                // DEPT000007 :- Marketing and Sales
                // DEPT000024 :- Sales and Business Development
                CN.DepartmentCode = loggedIn.Department_Code;
                CN.SalesPersonId = Session["EmployeeCode"].ToString();
            }
            else
            {
                CN.SalesPersonList = new SelectList(dbHRM.vw_Employee_Mst.Where(x => x.Comp_Code == "CO00000001").OrderBy(x => x.Employee_Name), "Employee_Code", "Employee_Name");
            }

            return View(CN);
        }

        public JsonResult ContTypeList(int lt)
        {
            dynamic CTypeList = null;
            if (lt == 1)
            {
                var list = new List<string>() { "20 FT", "40 FT" };
                CTypeList = from c in db.tbl_Truck_Type_Mst.Where(w => w.TT_SIZE != "0" && list.Any(l=>l == w.TT_CODE) ).OrderBy(o => o.TT_NAME).AsEnumerable()
                            select new { id = c.TT_CODE, name = c.TT_NAME };
            }
            else if (lt == 2)
            {
                CTypeList = from c in db.tbl_Truck_Type_Mst.OrderBy(o => o.TT_NAME).AsEnumerable()
                            select new { id = c.TT_CODE, name = c.TT_NAME };
            }
            return Json(CTypeList, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ConsignmentNoteEntry(VM_ConsignmentNote Consgn)
        {

            ViewBag.Header = "Consignment Note Entry";
            Consgn.ProductDtls = (List<VM_ProductDtls>)TempData["product"];
            ModelState["CN_ORIGIN"] = new ModelState();
            ModelState["CN_DESTINATION"] = new ModelState();
            ModelState["PaymentDtls.CHEQUE_AMT"] = new ModelState();

            Nullable<DateTime> ExpectedLoadDateTime = null;
            if (Consgn.ExpectedLoadDate != null && Consgn.ExpectedLoadTime != null)
            {
                ExpectedLoadDateTime = Consgn.ExpectedLoadDate.AddHours(Consgn.ExpectedLoadTime.Value.Hour).AddMinutes(Consgn.ExpectedLoadTime.Value.Minute);
            }
            if (ExpectedLoadDateTime == null)
            {
                ModelState.AddModelError("ExpectedLoadDate", "Please enter date and time");
            }

            var errors = ModelState.Where(x => x.Value.Errors.Count > 0).Select(x => new { x.Key, x.Value.Errors }).ToArray();

            if (ModelState.IsValid)
            {
                try
                {
                    decimal BILL_PARTY_ID;
                    if (Consgn.BILL_PARTY_TYPE == "CNOR")
                    {
                        BILL_PARTY_ID = Consgn.CNOR_ID;
                    }
                    else
                    {
                        BILL_PARTY_ID = Consgn.CNEE_ID;
                    }


                    //Added By Ashok 28/07/2021 For Billing Find Customer Contact No,email,credit days and sms send req
                    Usp_Get_CustInfo_By_Custname_Result objCust = db.Usp_Get_CustInfo_By_Custname(Convert.ToString(BILL_PARTY_ID)).ToList<Usp_Get_CustInfo_By_Custname_Result>().FirstOrDefault();
                    Consgn.Posting_For = objCust.CUST_NAME;
                    Consgn.Contact_No = objCust.MOBILE_NO;
                    Consgn.CustEmailId = objCust.EMAIL;
                    Consgn.SMS_Send_Req = objCust.SMS_Send_Req;
                    Consgn.PaymentDay = objCust.CREDEIT_DAYS ?? 0;

                    //SP_LogIn_Result loggedIn = (SP_LogIn_Result)Session["UserCredentials"];
                    //Consgn.PostedBy = loggedIn.EmpName;

                    string result = dalCN.Insert_DAL_ConsignmentNoteEntry(Consgn, db, ExpectedLoadDateTime);
                    if (result == "")
                    {
                        Success(string.Format("Consignment note is created successfully. Consignment Number is :  <b>" + Consgn.CN_CODE + "</b> and Job Order Number is :  <b>" + Consgn.JOB_CODE + " </b> "), true);
                    }
                    else
                    {
                        Danger(string.Format("<b>" + result + "</b>"), true);
                    }
                }
                catch (Exception ex)
                {
                    //logger.Error(ex, "Error : CN_Entry Save ", ex.Message);
                    Danger(string.Format("<b>Error : 101-Exception occured. Error Desc:</b>" + ex.Message), true);
                }
            }
            else
            {
                Danger(string.Format("<b>Error:102 :</b>" + string.Join("; ", ModelState.Values.SelectMany(z => z.Errors).Select(z => z.ErrorMessage))), true);
            }

            VM_ConsignmentNote CN = new VM_ConsignmentNote();
            CN.CNOR_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "1") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
            CN.CNEE_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "2") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
            CN.ProductDtls[0].PKG_list = new SelectList(db.Tbl_PKGType_Mst, "PKG_ID", "PKG_NAME", "1");
            CN.PaymentDtls.Bank_list = new SelectList(db.Tbl_Bank_Mst.OrderBy(x => x.BANKNAME), "BANKCODE", "BANKNAME");
            CN.INS_list = new SelectList(db.Tbl_InsuranceCompany_Mst.OrderBy(x => x.INS_NAME), "INS_ID", "INS_NAME");
            CN.PayMode_list = new SelectList(db.Tbl_PAYMODE_Mst, "PMOD_ID", "PMOD_NAME", "3");

            CN.LoadingPort_list = new SelectList(db.Tbl_PORT_MASTER.OrderBy(x => x.PORT_NAME), "PORT_ID", "PORT_NAME");
            CN.DischargePort_list = new SelectList(db.Tbl_PORT_MASTER.OrderBy(x => x.PORT_NAME), "PORT_ID", "PORT_NAME");
            CN.ContType_list = new SelectList(db.Tbl_ContainerType_Master, "CONT_TYPE_CODE", "CONT_TYPE_NAME", "DC");
            CN.BookingBranch_list = new SelectList(db.tbl_Branch_Master, "BRANCH_CODE", "BRANCH_NAME", "BR00000002");
            CN.BookingLocList = new SelectList(db.tbl_Location_Mst.OrderBy(x => x.LOC_NAME), "LOC_ID", "LOC_NAME");

            CN.MaterialTypeList = new SelectList(db.tbl_MaterialType_Mst.OrderBy(x => x.MT_NAME), "MT_NAME", "MT_NAME");
            CN.LocationList = new SelectList(comm.LocationList(), "Value", "Text");
            CN.CfsList = new SelectList(db.OTHER_CFS_MASTER.OrderBy(o => o.OTHER_CFS_NAME), "OTHER_CFS_CODE", "OTHER_CFS_NAME");
            CN.StuffingPointList = new SelectList(db.tbl_Pickup_Delivery_Mst.OrderBy(o => o.PD_NAME), "PD_ID", "PD_NAME");

            if (Session["EmployeeCode"] != null)
            {
                SP_LogIn_Result loggedIn = (SP_LogIn_Result)Session["UserCredentials"];
                CN.PostedBy = loggedIn.EmpName;
                CN.PaymentDay = 0;
                CN.SalesPersonList = new SelectList(dbHRM.vw_Employee_Mst.Where(x => x.Comp_Code == "CO00000001").OrderBy(x => x.Employee_Name), "Employee_Code", "Employee_Name", Session["EmployeeCode"].ToString());
                // DEPT000007 :- Marketing and Sales
                // DEPT000024 :- Sales and Business Development
                CN.DepartmentCode = loggedIn.Department_Code;
                CN.SalesPersonId = Session["EmployeeCode"].ToString();
            }
            else
            {
                CN.SalesPersonList = new SelectList(dbHRM.vw_Employee_Mst.Where(x => x.Comp_Code == "CO00000001").OrderBy(x => x.Employee_Name), "Employee_Code", "Employee_Name");
            }

            //Success(string.Format("Consignment note is created successfully. Consignment Number is :  <b>" + Consgn.CN_CODE + "</b>"), true);
            ModelState.Clear();
            return View(CN);

        }


        //[HttpPost]
        //public ActionResult ConsignmentNoteEntry(VM_ConsignmentNote Consgn)
        //{
        //    try
        //    {
        //        ViewBag.Header = "Consignment Note Entry";
        //        Consgn.ProductDtls = (List<VM_ProductDtls>)TempData["product"];

        //        string FromPDName = Consgn.FromPDName;
        //        string ToPDName = Consgn.ToPDName;
        //        if (FromPDName != null)
        //        {
        //            tbl_Pickup_Delivery_Mst tbls = (tbl_Pickup_Delivery_Mst)db.tbl_Pickup_Delivery_Mst.Where(X => X.PD_NAME == FromPDName).FirstOrDefault();
        //            if (tbls == null)
        //            {
        //                tbl_Pickup_Delivery_Mst tbl = new tbl_Pickup_Delivery_Mst();
        //                tbl.PD_NAME = FromPDName;
        //                tbl.LOC_ID = db.tbl_Location_Mst.Where(x => x.LOC_CODE == Consgn.FromLocId).FirstOrDefault().LOC_ID;
        //                tbl.PIN_CODE = Consgn.From_Pin;
        //                tbl.STATUS = "Y";
        //                db.tbl_Pickup_Delivery_Mst.Add(tbl);
        //                db.SaveChanges();
        //                Consgn.FromPDId = tbl.PD_ID;
        //            }
        //        }
        //        if (ToPDName != null)
        //        {
        //            tbl_Pickup_Delivery_Mst tblTo = (tbl_Pickup_Delivery_Mst)db.tbl_Pickup_Delivery_Mst.Where(X => X.PD_NAME == ToPDName).FirstOrDefault();
        //            if (tblTo == null)
        //            {
        //                tbl_Pickup_Delivery_Mst tbl = new tbl_Pickup_Delivery_Mst();
        //                tbl.PD_NAME = ToPDName;
        //                tbl.LOC_ID = db.tbl_Location_Mst.Where(x => x.LOC_CODE == Consgn.FromLocId).FirstOrDefault().LOC_ID;
        //                tbl.PIN_CODE = Consgn.To_Pin;
        //                tbl.STATUS = "Y";
        //                db.tbl_Pickup_Delivery_Mst.Add(tbl);
        //                db.SaveChanges();
        //                Consgn.ToPDId = tbl.PD_ID;
        //            }
        //        }
        //        string StuffingPointName = Consgn.StuffingPointName;
        //        if (StuffingPointName != null)
        //        {
        //            tbl_Pickup_Delivery_Mst tbls = (tbl_Pickup_Delivery_Mst)db.tbl_Pickup_Delivery_Mst.Where(X => X.PD_NAME == StuffingPointName).FirstOrDefault();
        //            if (tbls == null)
        //            {
        //                tbl_Pickup_Delivery_Mst tbl = new tbl_Pickup_Delivery_Mst();
        //                tbl.PD_NAME = StuffingPointName;
        //                tbl.LOC_ID = db.tbl_Location_Mst.Where(x => x.LOC_CODE == Consgn.StuffingLocId).FirstOrDefault().LOC_ID;
        //                tbl.PIN_CODE = Consgn.StuffingPin;
        //                tbl.STATUS = "Y";
        //                db.tbl_Pickup_Delivery_Mst.Add(tbl);
        //                db.SaveChanges();
        //                Consgn.StuffingPointId = tbl.PD_ID.ToString();
        //            }
        //        }

        //        string originName = Consgn.FromLocName ?? Consgn.OriginName;
        //        string destinationName = Consgn.ToLocName ?? Consgn.DestinationName;

        //        string route_name = string.Empty;
        //        if ((Consgn.CN_ORIGIN ?? "") != "")
        //        {
        //            route_name += Consgn.OriginName;
        //        }
        //        if ((Consgn.StuffingPointId ?? "") != "")
        //        {
        //            route_name += " - " + Consgn.StuffingPointName;
        //        }
        //        if ((Consgn.CfsCode ?? "") != "")
        //        {
        //            route_name += " - " + Consgn.CfsName;
        //        }
        //        if ((Consgn.CN_DESTINATION ?? "") != "")
        //        {
        //            route_name += " - " + Consgn.DestinationName;
        //        }

        //        Tbl_ConsignmentNote_Mst cn_Mst = new Tbl_ConsignmentNote_Mst();
        //        cn_Mst.ADDEDBY = Session["EmployeeCode"].ToString();
        //        cn_Mst.ADDEDON = DateTime.Now;
        //        cn_Mst.CN_DATE = Consgn.CN_DATE;
        //        cn_Mst.TRANSPORT_MODE = Consgn.TRANSPORT_MODE;
        //        cn_Mst.CN_SERVICE = Consgn.CN_SERVICE;
        //        cn_Mst.LOADING_PORT = Consgn.LOADING_PORT;
        //        cn_Mst.PICKUP_LOC = Consgn.PICKUP_LOC;
        //        cn_Mst.DISCHARGE_PORT = Consgn.DISCHARGE_PORT;
        //        cn_Mst.DELIVERY_LOC = Consgn.DELIVERY_LOC;
        //        cn_Mst.CNOR_ID = Consgn.CNOR_ID;
        //        cn_Mst.CNEE_ID = Consgn.CNEE_ID;
        //        cn_Mst.INVOICE_NO = Consgn.INVOICE_NO;
        //        cn_Mst.INVOICE_DATE = Consgn.INVOICE_DATE;
        //        cn_Mst.PO_NO = Consgn.PO_NO;
        //        cn_Mst.PO_DATE = Consgn.PO_DATE;
        //        cn_Mst.INS_ID = Consgn.INS_ID;
        //        cn_Mst.POLICY_NO = Consgn.POLICY_NO;
        //        cn_Mst.POLICY_DATE = Consgn.POLICY_DATE;
        //        cn_Mst.RISK_COVERAGE = Consgn.RISK_COVERAGE;
        //        cn_Mst.SUB_TOTAL = Consgn.SUB_TOTAL;
        //        cn_Mst.GRAND_TOTAL = Consgn.GRAND_TOTAL;
        //        cn_Mst.TOTAL_TAX = Consgn.GRAND_TOTAL - Consgn.SUB_TOTAL;
        //        cn_Mst.AMOUNT_IN_WORDS = Consgn.AMOUNT_IN_WORDS;

        //        cn_Mst.DONO_BOOKING = Consgn.DONO_BOOKING;
        //        cn_Mst.DONO_DELIVERY = Consgn.DONO_DELIVERY;
        //        cn_Mst.THCNO_BOOKING = Consgn.THCNO_BOOKING;
        //        cn_Mst.THCNO_DELIVERY = Consgn.THCNO_DELIVERY;
        //        cn_Mst.TRUCKNO_BOOKING = Consgn.TRUCKNO_BOOKING;
        //        cn_Mst.TRUCKNO_DELIVERY = Consgn.TRUCKNO_DELIVERY;
        //        cn_Mst.SEALNO_BOOKING = Consgn.SEALNO_BOOKING;
        //        cn_Mst.SEALNO_DELIVERY = Consgn.SEALNO_DELIVERY;
        //        cn_Mst.CONTAINER_NO = Consgn.CONTAINER_NO;
        //        var tt = db.tbl_Truck_Type_Mst.Where(w => w.TT_CODE == Consgn.TruckType);

        //        cn_Mst.CONTAINER_SIZE = Convert.ToInt32(tt.FirstOrDefault().TT_SIZE ?? "0");
        //        cn_Mst.TT_CODE = tt.FirstOrDefault().TT_CODE ?? "";


        //        cn_Mst.STATUS = "Y";
        //        cn_Mst.CN_CODE = db.usp_Auto_Alphanumeric_Code("Log.Tbl_ConsignmentNote_Mst", "CN_CODE", "CN", 10).ToList<usp_Auto_Alphanumeric_Code_Result>().First().AutoCode;
        //        cn_Mst.RATETYPE = Consgn.RateType;
        //        cn_Mst.CN_PAY_MODE = Consgn.CN_PAY_MODE;
        //        cn_Mst.MOVEMENT_TYPE = Consgn.MOVEMENT_TYPE;
        //        cn_Mst.CONT_TYPE_CODE = Consgn.CONT_TYPE_CODE;

        //        cn_Mst.CNOR_ADDRESS = Consgn.CNOR_ADDRESS.Replace("<br/>", " ");
        //        cn_Mst.CNOR_STATE_ID = Consgn.CNOR_STATE_ID;
        //        cn_Mst.CNOR_GSTIN = Consgn.CNOR_GSTIN == "NA" ? null : Consgn.CNOR_GSTIN;

        //        cn_Mst.CNEE_ADDRESS = Consgn.CNEE_ADDRESS.Replace("<br/>", " ");
        //        cn_Mst.CNEE_STATE_ID = Consgn.CNEE_STATE_ID;
        //        cn_Mst.CNEE_GSTIN = Consgn.CNEE_GSTIN == "NA" ? null : Consgn.CNEE_GSTIN;

        //        cn_Mst.BOOKING_BRANCH = Consgn.BOOKING_BRANCH;
        //        cn_Mst.BILL_PARTY_TYPE = Consgn.BILL_PARTY_TYPE;
        //        //int routeID = db.Tbl_Route_Mst.Where(x => x.ROUTE_NAME == cn_Mst.CN_SERVICE).FirstOrDefault().ROUTE_ID;
        //        int routeID = Convert.ToInt32(cn_Mst.CN_SERVICE);
        //        cn_Mst.CN_ROUTEID = routeID;
        //        cn_Mst.CN_ORIGIN = Consgn.CN_ORIGIN ?? Convert.ToString( Consgn.FromPDId);
        //        cn_Mst.CN_DESTINATION = Consgn.CN_DESTINATION ?? Convert.ToString(Consgn.ToPDId);
        //        cn_Mst.LOAD_TYPE = Consgn.LoadType;
        //        cn_Mst.GST_STATUS = Consgn.GST_STATUS;

        //        if (Consgn.BILL_PARTY_TYPE == "CNOR")
        //        {
        //            cn_Mst.BILL_PARTY_ID = Consgn.CNOR_ID;
        //            cn_Mst.BILL_PARTY_ADDR_ID = Consgn.CNOR_ADDRESS_ID;
                    
        //        }
        //        else
        //        {
        //            cn_Mst.BILL_PARTY_ID = Consgn.CNEE_ID;
        //            cn_Mst.BILL_PARTY_ADDR_ID = Consgn.CNEE_ADDRESS_ID;
        //        }

                

        //        cn_Mst.LOC_ID = Consgn.BookingLocation;
        //        UOW.ConsignmentNoteRepository.Insert(cn_Mst);
        //        decimal cnId = cn_Mst.CN_ID;
        //        Tbl_CN_ProductDtls Prod = null;
        //        int i = 1;
        //        foreach (VM_ProductDtls pd in Consgn.ProductDtls)
        //        {
        //            Prod = new Tbl_CN_ProductDtls();
        //            Prod.SR_NO = i;
        //            Prod.PRODUCT_NAME = pd.PRODUCT_NAME == null ? "NA" : pd.PRODUCT_NAME;
        //            Prod.PKG_ID = pd.PKG_ID;
        //            Prod.ACTUAL_WT = pd.ACTUAL_WT;
        //            Prod.CALC_CFT = pd.CALC_CFT;
        //            Prod.CHARGED_WT = pd.CHARGED_WT;
        //            Prod.HEIGHT = pd.HEIGHT;
        //            Prod.LENGTH = pd.LENGTH;
        //            Prod.UNITS = pd.UNITS;
        //            Prod.WIDTH = pd.WIDTH;
        //            Prod.CN_ID = cn_Mst.CN_ID;

        //            UOW.CN_ProductDtlsRepository.Insert(Prod);
        //            i++;
        //        }

        //        Tbl_CN_DocAttachment_Dtls _Doc = null;
        //        foreach (VM_DocAttach doc in Consgn.doc)
        //        {
        //            if (doc.Checked)
        //            {
        //                _Doc = new Tbl_CN_DocAttachment_Dtls();
        //                _Doc.CN_ID = cn_Mst.CN_ID;
        //                _Doc.DOC_NAME = doc.Id;
        //                _Doc.STATUS = "Y";
        //                UOW.CN_DocAttachRepository.Insert(_Doc);
        //            }
        //        }
        //        if (Consgn.PaymentDtls.PAYMENT_MODE != null)
        //        {
        //            Tbl_CN_Payment_Dtls PayDtls = new Tbl_CN_Payment_Dtls();
        //            PayDtls.CN_ID = cn_Mst.CN_ID;
        //            PayDtls.PAYMENT_MODE = Consgn.PaymentDtls.PAYMENT_MODE;
        //            PayDtls.BANK_CODE = Consgn.PaymentDtls.BANK_CODE;
        //            PayDtls.CHEQUE_NO = Consgn.PaymentDtls.CHEQUE_NO;
        //            PayDtls.CHEQUE_DATE = Consgn.PaymentDtls.CHEQUE_DATE;
        //            PayDtls.CHEQUE_AMT = Consgn.PaymentDtls.CHEQUE_AMT;
        //            PayDtls.RECEIPT_NO = Consgn.PaymentDtls.RECEIPT_NO;

        //            UOW.CN_PaymentDtlsRepository.Insert(PayDtls);

        //            //Added By Pramesh Kuamr Dated: 09-06-2018
        //            if (cn_Mst.CN_PAY_MODE == 1)// 1 for Paid
        //            {
        //                Tbl_AdvanceReceipt_hdr arHdr = new Tbl_AdvanceReceipt_hdr();
        //                arHdr.RECEIPT_DATE = Convert.ToDateTime(Consgn.CN_DATE);
        //                arHdr.PARTY_ID = Convert.ToInt32(cn_Mst.BILL_PARTY_ID);
        //                arHdr.AMOUNT = Convert.ToDecimal(PayDtls.CHEQUE_AMT);
        //                arHdr.TOTAL_AMOUNT = Convert.ToDecimal(PayDtls.CHEQUE_AMT);
        //                arHdr.PAY_MODE = PayDtls.PAYMENT_MODE;
        //                arHdr.PAY_DETAILS = PayDtls.RECEIPT_NO;
        //                arHdr.ADDED_ON = DateTime.Now;
        //                arHdr.ADDED_BY = Session["EmployeeCode"].ToString();
        //                arHdr.CN_ID = cn_Mst.CN_ID;
        //                arHdr.SOURCE = "Paid";

        //                UOW.Tbl_AdvanceReceipt_hdr_Repository.Insert(arHdr);

        //                if (arHdr.PAY_MODE != "Cash")
        //                {
        //                    Tbl_AdvanceReceipt_Dtls arDtls = new Tbl_AdvanceReceipt_Dtls();
        //                    arDtls.ADV_ID = arHdr.ADV_ID;
        //                    arDtls.CHQ_RTGS_DD_NO = PayDtls.CHEQUE_NO;
        //                    arDtls.CHQ_RTGS_DD_DATE = Convert.ToDateTime(PayDtls.CHEQUE_DATE);
        //                    arDtls.BANK_ID = PayDtls.BANK_CODE;
        //                    arDtls.AMOUNT = PayDtls.CHEQUE_AMT;
        //                    UOW.Tbl_AdvanceReceipt_Dtls_Repository.Insert(arDtls);
        //                }

        //                Tbl_AdvanceReceipt_CN_Adjust cnDtls = new Tbl_AdvanceReceipt_CN_Adjust();
        //                cnDtls.ADV_ID = arHdr.ADV_ID;
        //                cnDtls.CN_ID = cn_Mst.CN_ID;
        //                cnDtls.ADJ_AMOUNT = PayDtls.CHEQUE_AMT;
        //                UOW.Tbl_AdvanceReceipt_CN_Adjust_Repository.Insert(cnDtls);
        //            }
        //        }//End


        //        Tbl_CN_Revenue_Dtls _RevDtls = null;
        //        foreach (VM_Revenue_Dtls Rev in Consgn.RevenueDtls)
        //        {
        //            if (Rev.BILL_AMT > 0)
        //            {
        //                _RevDtls = new Tbl_CN_Revenue_Dtls();
        //                _RevDtls.CN_ID = Rev.CN_ID;
        //                _RevDtls.BITM_ID = Rev.BITM_ID;
        //                _RevDtls.BILL_AMT = Rev.BILL_AMT;
        //                _RevDtls.BILL_RATE = Rev.BILL_RATE;
        //                _RevDtls.TOTAL_WT = Rev.TOTAL_WT;
        //                UOW.CN_Revenue_DtlsRepository.Insert(_RevDtls);
        //            }
        //        }

        //        Tbl_CN_TAX_Dtls _TAX = null;
        //        foreach (VM_TAX_Dtls tax in Consgn.TAXDtls)
        //        {
        //            if (tax.TAX_VALUE > 0)
        //            {
        //                _TAX = new Tbl_CN_TAX_Dtls();
        //                _TAX.CN_ID = tax.CN_ID;
        //                _TAX.TAX_ID = tax.TAX_ID;
        //                _TAX.AMOUNT = Consgn.SUB_TOTAL;
        //                _TAX.TAX_PERCENTAGE = tax.TAX_PERCENTAGE;
        //                _TAX.TAX_VALUE = tax.TAX_VALUE;
        //                UOW.CN_TAX_DtlsRepository.Insert(_TAX);
        //            }
        //        }

        //        //Added By Ashok 28/07/2021 For Billing Find Customer Contact No,email,credit days and sms send req
        //        Usp_Get_CustInfo_By_Custname_Result objCust = db.Usp_Get_CustInfo_By_Custname(Convert.ToString(cn_Mst.BILL_PARTY_ID)).ToList<Usp_Get_CustInfo_By_Custname_Result>().FirstOrDefault();
        //        Consgn.Contact_No = objCust.MOBILE_NO;
        //        Consgn.CustEmailId = objCust.EMAIL;
        //        Consgn.SMS_Send_Req = objCust.SMS_Send_Req;
        //        Consgn.PaymentDay = objCust.CREDEIT_DAYS??0;

        //        //End

        //        UOW.Save();
        //        if (cn_Mst.CN_ID > 0 && Consgn.LpId > 0)
        //        {
        //            Tbl_QuickLoadPosting qlp = db.Tbl_QuickLoadPosting.Find(Consgn.LpId);
        //            qlp.CN_ID = cn_Mst.CN_ID;
        //            db.Tbl_QuickLoadPosting.Add(qlp);
        //            db.Entry(qlp).State = System.Data.EntityState.Modified;
        //            db.SaveChanges();
        //        }

        //        VM_ConsignmentNote CN = new VM_ConsignmentNote();
        //        CN.CNOR_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "1") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
        //        CN.CNEE_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "2") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
        //        CN.ProductDtls[0].PKG_list = new SelectList(db.Tbl_PKGType_Mst, "PKG_ID", "PKG_NAME", "1");
        //        CN.PaymentDtls.Bank_list = new SelectList(db.Tbl_Bank_Mst, "BANKCODE", "BANKNAME");
        //        CN.INS_list = new SelectList(db.Tbl_InsuranceCompany_Mst, "INS_ID", "INS_NAME");
        //        CN.PayMode_list = new SelectList(db.Tbl_PAYMODE_Mst, "PMOD_ID", "PMOD_NAME", "3");

        //        CN.LoadingPort_list = new SelectList(db.Tbl_PORT_MASTER, "PORT_ID", "PORT_NAME");
        //        CN.DischargePort_list = new SelectList(db.Tbl_PORT_MASTER, "PORT_ID", "PORT_NAME");
        //        CN.ContType_list = new SelectList(db.Tbl_ContainerType_Master, "CONT_TYPE_CODE", "CONT_TYPE_NAME", "DC");
        //        CN.BookingBranch_list = new SelectList(db.tbl_Branch_Master, "BRANCH_CODE", "BRANCH_NAME", "BR00000002");
        //        CN.BookingLocList = new SelectList(db.tbl_Location_Mst, "LOC_ID", "LOC_NAME");

        //        CN.MaterialTypeList = new SelectList(db.tbl_MaterialType_Mst, "MT_NAME", "MT_NAME");
        //        CN.LocationList = new SelectList(comm.LocationList(), "Value", "Text");
        //        CN.CfsList = new SelectList(db.OTHER_CFS_MASTER.OrderBy(o => o.OTHER_CFS_NAME), "OTHER_CFS_CODE", "OTHER_CFS_NAME");
        //        CN.StuffingPointList = new SelectList(db.tbl_Pickup_Delivery_Mst.OrderBy(o => o.PD_NAME), "PD_ID", "PD_NAME");

        //        Success(string.Format("Consignment note is created successfully. Consignment Number is :  <b>" + cn_Mst.CN_CODE + "</b>"), true);
        //        ModelState.Clear();
        //        return View(CN);
        //    }
        //    catch (DbEntityValidationException e)
        //    {
        //        foreach (var eve in e.EntityValidationErrors)
        //        {
        //            Danger(string.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
        //                eve.Entry.Entity.GetType().Name, eve.Entry.State), true);
        //            foreach (var ve in eve.ValidationErrors)
        //            {
        //                Danger(string.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage), true);

        //            }
        //        }
        //        throw;
        //    }
        //}

        public ActionResult ConsignmentNoteEntry_PD(List<VM_ProductDtls> list)
        {
            TempData["product"] = list;
            return View();
        }
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCustomerCode(string Cust_ID, string from)
        {

            if (from == "ddl")
            {
                decimal localCustID = Convert.ToDecimal(Cust_ID);
                var result = from s in db.Tbl_Customer_Mst.Where(x=>x.STATUS.ToLower() == "y")
                             where s.CUST_ID == localCustID
                             select new { CUST_CODE = s.CUST_CODE, CUST_ID = s.CUST_ID };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var result = from s in db.Tbl_Customer_Mst.Where(x => x.STATUS.ToLower() == "y")
                             where s.CUST_CODE == Cust_ID
                             select new { CUST_CODE = s.CUST_CODE, CUST_ID = s.CUST_ID };
                return Json(result, JsonRequestBehavior.AllowGet);
            }

        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCustomerState_Dtls(decimal Cust_ID)
        {
            var result = from s in db.Tbl_Customer_Address_Dtls
                         join sa in db.tbl_State_Mst on s.STATE_ID equals sa.State_ID
                         where s.CUST_ID == Cust_ID
                         select new { State_Code = sa.State_ID, State_Name = sa.State_Name };

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetGSTIN_Dtls(decimal Cust_ID, string STATE_ID)
        {
            var result = from s in db.Tbl_Customer_Address_Dtls
                         where s.CUST_ID == Cust_ID && s.STATE_ID == STATE_ID
                         select new { GSTIN = (s.GSTIN ?? "") == "" ? "NA" : s.GSTIN };

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCustomerAddress_Dtls(string Cust_Code, string GSTIN)
        {
            GSTIN = GSTIN == "NA" ? "" : GSTIN;
            var result = db.usp_CustomerAddress_Dtls(GSTIN, Cust_Code).ToList<usp_CustomerAddress_Dtls_Result>();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetStateIDByBranch(string Branch_Code)
        {
            var result = from s in db.tbl_Branch_Master
                         where s.Branch_Code == Branch_Code
                         select new { State_Id = s.State_Id };

            return Json(result, JsonRequestBehavior.AllowGet);
        }


        //Added By Pramesh Kumar Vishwakarma, Date: 07-09-2017
        public ActionResult ConsignmentNoteView()
        {
            ViewBag.Header = "Consignment Note View";
            VM_ConsignmentNoteView cnv = new VM_ConsignmentNoteView();
            return View(cnv);
        }

        [HttpPost]
        [OutputCache(Duration = 30, VaryByParam = "DOC_No")]
        public ActionResult ConsignmentNoteView(VM_ConsignmentNoteView cnv)
        {
            ViewBag.Header = "Consignment Note View";
            var obj = db.usp_Select_ConsignmentNote_Details(cnv.DOC_No).ToList<usp_Select_ConsignmentNote_Details_Result>();

            VM_ConsignmentNoteView_Details cnvd = new VM_ConsignmentNoteView_Details();
            cnvd.CN_ID = -1;
            if (obj != null && obj.Count() > 0)
            {
                cnvd.CN_ID = obj.FirstOrDefault().CN_ID;
                cnvd.CN_DATE = obj.FirstOrDefault().CN_DATE;
                cnvd.TRANSPORT_MODE = obj.FirstOrDefault().TRANSPORT_MODE;
                cnvd.CN_SERVICE = obj.FirstOrDefault().CN_SERVICE;
                cnvd.MOVEMENT_TYPE = obj.FirstOrDefault().MOVEMENT_TYPE;
                cnvd.PICKUP_LOC = obj.FirstOrDefault().PICKUP_LOC;
                cnvd.CONT_TYPE_CODE = obj.FirstOrDefault().CONT_TYPE_NAME;
                cnvd.DELIVERY_LOC = obj.FirstOrDefault().DELIVERY_LOC;
                cnvd.BOOKING_BRANCH = obj.FirstOrDefault().BOOKING_BRANCH;
                cnvd.BILL_PARTY_TYPE = obj.FirstOrDefault().BILL_PARTY_TYPE;
                //Consigner Details
                cnvd.CNOR_ID = obj.FirstOrDefault().CNOR_ID;
                cnvd.CNOR_NAME = obj.FirstOrDefault().CNOR_NAME;
                //cnvd.CNOR_CODE = obj.FirstOrDefault().CNOR_CODE;
                cnvd.CNOR_STATE_ID = obj.FirstOrDefault().CNOR_STATE_ID;
                cnvd.CNOR_STATE_NAME = obj.FirstOrDefault().CNOR_State_NM;
                cnvd.CNOR_CODE = obj.FirstOrDefault().CNOR_CODE;

                cnvd.CNOR_GSTIN = obj.FirstOrDefault().CNOR_GSTIN;
                cnvd.CNOR_ADDRESS = obj.FirstOrDefault().CNOR_ADDRESS;
                cnvd.INVOICE_NO = obj.FirstOrDefault().INVOICE_NO;
                cnvd.INVOICE_DATE = obj.FirstOrDefault().INVOICE_DATE;

                //Consignee Details
                cnvd.CNEE_ID = obj.FirstOrDefault().CNEE_ID;
                cnvd.CNEE_STATE_ID = obj.FirstOrDefault().CNEE_STATE_ID;
                cnvd.CNEE_STATE_NAME = obj.FirstOrDefault().CNEE_State_NM;
                cnvd.CNEE_NAME = obj.FirstOrDefault().CNEE_NAME;
                cnvd.CNEE_CODE = obj.FirstOrDefault().CNEE_CODE;
                cnvd.CNEE_GSTIN = obj.FirstOrDefault().CNEE_GSTIN;
                cnvd.CNEE_ADDRESS = obj.FirstOrDefault().CNEE_ADDRESS;
                cnvd.PO_NO = obj.FirstOrDefault().PO_NO;
                cnvd.PO_DATE = obj.FirstOrDefault().PO_DATE;
                //Payment Mode
                var payment = db.Tbl_CN_Payment_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (payment != null && payment.Count() > 0)
                {
                    cnvd.PAYMENT_MODE = payment.FirstOrDefault().PAYMENT_MODE;
                    //cnvd.BANK_NAME = payment.FirstOrDefault().;
                    cnvd.CHEQUE_NO = payment.FirstOrDefault().CHEQUE_NO;
                    cnvd.CHEQUE_DATE = Convert.ToString(payment.FirstOrDefault().CHEQUE_DATE);
                    cnvd.CHEQUE_AMT = payment.FirstOrDefault().CHEQUE_AMT;
                    cnvd.RECEIPT_NO = payment.FirstOrDefault().RECEIPT_NO;
                }

                //Insurance
                //cnvd.INS_COMPANY = obj.FirstOrDefault().tbl_in;
                cnvd.POLICY_NO = obj.FirstOrDefault().POLICY_NO;
                cnvd.POLICY_DATE = obj.FirstOrDefault().POLICY_DATE;
                cnvd.RISK_COVERAGE = obj.FirstOrDefault().RISK_COVERAGE;

                cnvd.DONO_BOOKING = obj.FirstOrDefault().DONO_BOOKING;
                cnvd.DONO_DELIVERY = obj.FirstOrDefault().DONO_DELIVERY;
                cnvd.SEALNO_BOOKING = obj.FirstOrDefault().SEALNO_BOOKING;
                cnvd.SEALNO_DELIVERY = obj.FirstOrDefault().SEALNO_DELIVERY;
                //Container Deatails
                cnvd.CONTAINER_NO = obj.FirstOrDefault().CONTAINER_NO;
                cnvd.CONTAINER_SIZE = obj.FirstOrDefault().CONTAINER_SIZE;

                //Container 2 Deatails
                cnvd.CONTAINER_NO_2 = obj.FirstOrDefault().CONTAINER_NO_2;
                cnvd.CONTAINER_SIZE_2 = obj.FirstOrDefault().CONTAINER_SIZE_2;

                //Added by Ashok Date : 05/08/2022
                cnvd.LOAD_TYPE = obj.FirstOrDefault().LOAD_TYPE;

                var attatched = db.Tbl_CN_DocAttachment_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (attatched != null && attatched.Count() > 0)
                {
                    cnvd.doc = new List<VM_DocAttach>();
                    foreach (var s in attatched)
                    {
                        cnvd.doc.Add(new VM_DocAttach { Name = s.DOC_NAME.ToString(), Checked = true });
                    }
                }

                //Product Deatails
                for (int i = 0; i < cnvd.RateTypeList.Count; i++)
                {
                    if (cnvd.RateTypeList[i].Id == obj.FirstOrDefault().RATETYPE)
                        cnvd.RateTypeList[i].Checked = true;
                }

                var product = db.Tbl_CN_ProductDtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (product != null && product.Count() > 0)
                {
                    int i = 0;
                    cnvd.ProductDtls = new List<VM_ProductDtls>();
                    foreach (var p in product)
                    {
                        i++;
                        var pc = db.Tbl_PKGType_Mst.Where(p1 => p1.PKG_ID == p.PKG_ID);
                        cnvd.ProductDtls.Add(new VM_ProductDtls { SR_NO = i, PKG_NAME = pc.FirstOrDefault().PKG_NAME, PRODUCT_NAME = p.PRODUCT_NAME, UNITS = p.UNITS, ACTUAL_WT = p.ACTUAL_WT, CHARGED_WT = p.CHARGED_WT, LENGTH = p.LENGTH, WIDTH = p.WIDTH, HEIGHT = p.HEIGHT });
                    }
                }

                cnvd.AMOUNT_IN_WORDS = obj.FirstOrDefault().AMOUNT_IN_WORDS;
                cnvd.SUB_TOTAL = obj.FirstOrDefault().SUB_TOTAL;
                cnvd.GRAND_TOTAL = obj.FirstOrDefault().GRAND_TOTAL;
                cnvd.CN_PAY_MODE = obj.FirstOrDefault().PMOD_NAME;

                var rev = db.Tbl_CN_Revenue_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (rev != null && rev.Count() > 0)
                {
                    cnvd.RevenueDtls = db.Tbl_BILLITEM_Mst.Select(j => new VM_Revenue_Dtls { BITM_ID = j.BITM_ID, BITM_NAME = j.BITM_NAME }).ToList();
                    foreach (var r in rev)
                    {
                        for (int i = 0; i < cnvd.RevenueDtls.Count; i++)
                        {
                            if (r.BITM_ID == cnvd.RevenueDtls[i].BITM_ID)
                            {
                                cnvd.RevenueDtls[i].BILL_RATE = r.BILL_RATE;
                                cnvd.RevenueDtls[i].BILL_AMT = r.BILL_AMT;
                            }
                        }
                    }
                }

                var tax = db.Tbl_CN_TAX_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (tax != null && tax.Count() > 0)
                {
                    cnvd.TAXDtls = new List<VM_TAX_Dtls>();
                    foreach (var p in tax)
                    {
                        cnvd.TAXDtls.Add(new VM_TAX_Dtls { Tax_NAME = p.Tbl_BILL_ITEM_TAX.TAX_NAME, TAX_VALUE = p.TAX_VALUE, AMOUNT = p.AMOUNT });
                    }
                }

                cnvd.ORIGIN = obj.FirstOrDefault().ORIGIN;
                cnvd.DESTINATION = obj.FirstOrDefault().DESTINATION;
            }

            cnv.Result = cnvd;
            return View(cnv);
        }

        //----Modify By : Ashish Kalsarpe --- Date :15/12/2018 ----
        //---- Description : parameter " string actionType " Added for job Report View.
        [OutputCache(Duration = 10, VaryByParam = "DOC_No")]
        public ActionResult ConsignmentNotePrint(string docNo, string source, string actionType)
        {
            VM_ConsignmentNoteView cnv = new VM_ConsignmentNoteView();
            ViewBag.Header = "Consignment Note Print";
            var obj = db.usp_Select_ConsignmentNote_Details(docNo).ToList<usp_Select_ConsignmentNote_Details_Result>();

            VM_ConsignmentNoteView_Details cnvd = new VM_ConsignmentNoteView_Details();
            cnvd.CN_ID = -1;
            if (obj != null && obj.Count() > 0)
            {
                cnvd.CN_ID = obj.FirstOrDefault().CN_ID;
                cnvd.CN_CODE = docNo;
                cnvd.CN_DATE = obj.FirstOrDefault().CN_DATE;
                cnvd.TRANSPORT_MODE = obj.FirstOrDefault().TRANSPORT_MODE;
                cnvd.CN_SERVICE = obj.FirstOrDefault().CN_SERVICE;
                cnvd.MOVEMENT_TYPE = obj.FirstOrDefault().MOVEMENT_TYPE;
                cnvd.PICKUP_LOC = obj.FirstOrDefault().PICKUP_LOC;
                cnvd.CONT_TYPE_CODE = obj.FirstOrDefault().CONT_TYPE_NAME;
                cnvd.DELIVERY_LOC = obj.FirstOrDefault().DELIVERY_LOC;
                cnvd.BOOKING_BRANCH = obj.FirstOrDefault().BOOKING_BRANCH;
                cnvd.BOOKING_BRANCH_CODE = obj.FirstOrDefault().BOOKING_BRANCH_CODE;

                cnvd.BILL_PARTY_TYPE = obj.FirstOrDefault().BILL_PARTY_TYPE;
                //Consigner Details
                cnvd.CNOR_ID = obj.FirstOrDefault().CNOR_ID;
                cnvd.CNOR_NAME = obj.FirstOrDefault().CNOR_NAME;
                //cnvd.CNOR_CODE = obj.FirstOrDefault().CNOR_CODE;
                cnvd.CNOR_STATE_ID = obj.FirstOrDefault().CNOR_STATE_ID;
                cnvd.CNOR_STATE_NAME = obj.FirstOrDefault().CNOR_State_NM;
                cnvd.CNOR_CODE = obj.FirstOrDefault().CNOR_CODE;

                cnvd.CNOR_GSTIN = obj.FirstOrDefault().CNOR_GSTIN;
                cnvd.CNOR_ADDRESS = obj.FirstOrDefault().CNOR_ADDRESS;
                cnvd.INVOICE_NO = obj.FirstOrDefault().INVOICE_NO;
                cnvd.INVOICE_DATE = obj.FirstOrDefault().INVOICE_DATE;

                //Consignee Details
                cnvd.CNEE_ID = obj.FirstOrDefault().CNEE_ID;
                cnvd.CNEE_STATE_ID = obj.FirstOrDefault().CNEE_STATE_ID;
                cnvd.CNEE_STATE_NAME = obj.FirstOrDefault().CNEE_State_NM;
                cnvd.CNEE_NAME = obj.FirstOrDefault().CNEE_NAME;
                cnvd.CNEE_CODE = obj.FirstOrDefault().CNEE_CODE;
                cnvd.CNEE_GSTIN = obj.FirstOrDefault().CNEE_GSTIN;
                cnvd.CNEE_ADDRESS = obj.FirstOrDefault().CNEE_ADDRESS;
                cnvd.PO_NO = obj.FirstOrDefault().PO_NO;
                cnvd.PO_DATE = obj.FirstOrDefault().PO_DATE;
                //Payment Mode

                var payment = db.Tbl_CN_Payment_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);

                if (payment != null && payment.Count() > 0)
                {

                    if (Convert.ToString(payment.FirstOrDefault().PAYMENT_MODE) != "")
                    {
                        if (Convert.ToString(payment.FirstOrDefault().PAYMENT_MODE) == "C")
                        {
                            cnvd.PAYMENT_MODE = "Cash";
                        }
                        else if (Convert.ToString(payment.FirstOrDefault().PAYMENT_MODE) == "Q")
                        {
                            cnvd.PAYMENT_MODE = "Cheque";
                        }
                        else
                        {
                            cnvd.PAYMENT_MODE = "RTGS";
                        }
                    }
                    else
                    {
                        cnvd.PAYMENT_MODE = "";
                    }

                    //cnvd.BANK_NAME = payment.FirstOrDefault().;
                    cnvd.CHEQUE_NO = Convert.ToString(payment.FirstOrDefault().CHEQUE_NO);

                    if (Convert.ToString(payment.FirstOrDefault().CHEQUE_DATE) != "")
                    {
                        DateTime dt = Convert.ToDateTime(payment.FirstOrDefault().CHEQUE_DATE);
                        cnvd.CHEQUE_DATE = dt.ToString("dd/MM/yyyy");
                        // cnvd.CHEQUE_DATE = Convert.ToString(payment.FirstOrDefault().CHEQUE_DATE);
                    }
                    else
                    {
                        cnvd.CHEQUE_DATE = "";
                    }
                    cnvd.CHEQUE_AMT = payment.FirstOrDefault().CHEQUE_AMT;
                    cnvd.RECEIPT_NO = payment.FirstOrDefault().RECEIPT_NO;
                }

                //Insurance
                //cnvd.INS_COMPANY = obj.FirstOrDefault().tbl_in;
                cnvd.POLICY_NO = obj.FirstOrDefault().POLICY_NO;
                cnvd.POLICY_DATE = obj.FirstOrDefault().POLICY_DATE;
                cnvd.RISK_COVERAGE = obj.FirstOrDefault().RISK_COVERAGE;

                cnvd.DONO_BOOKING = obj.FirstOrDefault().DONO_BOOKING;
                cnvd.DONO_DELIVERY = obj.FirstOrDefault().DONO_DELIVERY;
                cnvd.SEALNO_BOOKING = obj.FirstOrDefault().SEALNO_BOOKING;
                cnvd.SEALNO_DELIVERY = obj.FirstOrDefault().SEALNO_DELIVERY;
                //Container Deatails
                cnvd.CONTAINER_NO = obj.FirstOrDefault().CONTAINER_NO;
                cnvd.CONTAINER_SIZE = obj.FirstOrDefault().CONTAINER_SIZE;

                //Container 2 Deatails
                cnvd.CONTAINER_NO_2 = obj.FirstOrDefault().CONTAINER_NO_2;
                cnvd.CONTAINER_SIZE_2 = obj.FirstOrDefault().CONTAINER_SIZE_2;

                cnvd.LOAD_TYPE = obj.FirstOrDefault().LOAD_TYPE;

                var attatched = db.Tbl_CN_DocAttachment_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (attatched != null && attatched.Count() > 0)
                {
                    cnvd.doc = new List<VM_DocAttach>();
                    foreach (var s in attatched)
                    {
                        cnvd.doc.Add(new VM_DocAttach { Name = s.DOC_NAME.ToString(), Checked = true });
                    }
                }

                //Product Deatails
                for (int i = 0; i < cnvd.RateTypeList.Count; i++)
                {
                    if (cnvd.RateTypeList[i].Id == obj.FirstOrDefault().RATETYPE)
                        cnvd.RateTypeList[i].Checked = true;
                }

                var product = db.Tbl_CN_ProductDtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (product != null && product.Count() > 0)
                {
                    int i = 0;
                    cnvd.ProductDtls = new List<VM_ProductDtls>();
                    foreach (var p in product)
                    {
                        i++;
                        var pc = db.Tbl_PKGType_Mst.Where(p1 => p1.PKG_ID == p.PKG_ID);
                        cnvd.ProductDtls.Add(new VM_ProductDtls { SR_NO = i, PKG_NAME = pc.FirstOrDefault().PKG_NAME, PRODUCT_NAME = p.PRODUCT_NAME, UNITS = p.UNITS, ACTUAL_WT = p.ACTUAL_WT, CHARGED_WT = p.CHARGED_WT, LENGTH = p.LENGTH, WIDTH = p.WIDTH, HEIGHT = p.HEIGHT });
                    }
                }

                cnvd.AMOUNT_IN_WORDS = obj.FirstOrDefault().AMOUNT_IN_WORDS;
                cnvd.SUB_TOTAL = obj.FirstOrDefault().SUB_TOTAL;
                cnvd.GRAND_TOTAL = obj.FirstOrDefault().GRAND_TOTAL;
                cnvd.CN_PAY_MODE = obj.FirstOrDefault().PMOD_NAME;

                var rev = db.Tbl_CN_Revenue_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (rev != null && rev.Count() > 0)
                {
                    cnvd.RevenueDtls = db.Tbl_BILLITEM_Mst.Select(j => new VM_Revenue_Dtls { BITM_ID = j.BITM_ID, BITM_NAME = j.BITM_NAME }).ToList();
                    foreach (var r in rev)
                    {
                        for (int i = 0; i < cnvd.RevenueDtls.Count; i++)
                        {
                            if (r.BITM_ID == cnvd.RevenueDtls[i].BITM_ID)
                            {
                                cnvd.RevenueDtls[i].BILL_RATE = r.BILL_RATE;
                                cnvd.RevenueDtls[i].BILL_AMT = r.BILL_AMT;
                            }
                        }
                    }
                }

                var tax = db.Tbl_CN_TAX_Dtls.Where(p => p.CN_ID == cnvd.CN_ID);
                if (tax != null && tax.Count() > 0)
                {
                    cnvd.TAXDtls = new List<VM_TAX_Dtls>();
                    foreach (var p in tax)
                    {
                        cnvd.TAXDtls.Add(new VM_TAX_Dtls { Tax_NAME = p.Tbl_BILL_ITEM_TAX.TAX_NAME, TAX_VALUE = p.TAX_VALUE, AMOUNT = p.AMOUNT });
                    }
                }

                cnvd.ORIGIN = obj.FirstOrDefault().ORIGIN;
                cnvd.DESTINATION = obj.FirstOrDefault().DESTINATION;
            }

            cnv.Result = cnvd;

            if (actionType == "JobReport")
            {
                List<VM_Navigation> navlist = (List<VM_Navigation>)TempData.Peek("Navigation");
                var result = navlist.Where(x => x.page == "Consignment").FirstOrDefault();
                cnv.Previous = result.previous;
                cnv.Next = result.next;
            }

            if (source == "CP")
            {
                return View("ConsignmentNotePrint", cnv);
            }
            else if (source == "CPWO")
            { 
                return View("ConsignmentNotePrint", cnv);
            }
            else if (source == "IP")
            {
                return View("ConsignmentNoteInvoice", cnv);
            }
            else if (source == "RP")
            {
                return View("ConsignmentNoteInvoiceCumReceipt", cnv);
            }
            else
            {
                return View(cnv);
            }
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetStateIDByBranchLocation(decimal locId)
        {
            var result = from s in db.tbl_Location_Mst
                         join b in db.tbl_Branch_Master on s.BRANCH_CODE equals b.Branch_Code
                         where s.LOC_ID == locId
                         select new { State_Id = b.State_Id, BRANCH_CODE = s.BRANCH_CODE, locCode = s.LOC_CODE, locID = s.LOC_ID, GSTIN_NO = b.GSTIN };

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        //Added By Ashok Date : 10-08-2021
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Get_cnewaybillno(string ewaybillno)
        {
            string ewaybill_no = "";
            ewaybill_no = new DAL_ConsignmentNote().GET_CN_EWAY_BILL_NO(ewaybillno);
            return Json(ewaybill_no, JsonRequestBehavior.AllowGet);
        }

        //Added By Ashok Date : 10-08-2021
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Get_ewaybillno_CN(string ewaybillno)
        {
            string ewaybill_no = "";
            ewaybill_no = new DAL_ConsignmentNote().GET_EWAY_BILL_NO_CN(ewaybillno);
            return Json(ewaybill_no, JsonRequestBehavior.AllowGet);
        }


        //Added By Gaurav Date : 04-09-2021
        #region Consignment_Note_Mst_Ref

        [Authorize]
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetEwayBillDetails(string ewbNo, string ewbBkg_BR_GSTIN)
        {

            VM_EwayBill_Ref _objVM_EwayBill_Ref = new VM_EwayBill_Ref();

            _objVM_EwayBill_Ref = new DAL_ConsignmentNote().GET_ConsignmentNote_Mst_Ref_By_EwBillNo(ewbNo);

            if (_objVM_EwayBill_Ref.eway_bill_number == null)
            {

                string gstinNo = ewbBkg_BR_GSTIN;
                eWaybillServices eWaybillS = new eWaybillServices();
                eway_Auth_Resp _eway_Auth_Resp = new eway_Auth_Resp();
                string errmsg = "";

                eWaybillS.GetAuthToken(out _eway_Auth_Resp, out errmsg);

                eWaybillS.GetEwayBillDetails(_eway_Auth_Resp, out errmsg, gstinNo, ewbNo, out _objVM_EwayBill_Ref);
            }

            return PartialView("_EwayBillDetails", _objVM_EwayBill_Ref);

        }


        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetEwayBill_Details(string ewbNo)
        {
            VM_EwayBill_Ref _objVM_EwayBill_Ref = new VM_EwayBill_Ref();

            _objVM_EwayBill_Ref = new DAL_ConsignmentNote().GET_ConsignmentNote_Mst_Ref_By_EwBillNo(ewbNo);

            return Json(_objVM_EwayBill_Ref, JsonRequestBehavior.AllowGet);
        }


        [Authorize]
        [ValidateAntiForgeryToken]
        [HttpPost]
        public ActionResult INSERT_ConsignmentNote_Mst_Ref(VM_EwayBill_Ref objVM_EwayBill_Ref)
        {
            string result = "";

            result = new DAL_ConsignmentNote().INSERT_Tbl_ConsignmentNote_Mst_Ref(objVM_EwayBill_Ref);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCustomerAddress_Dtls_by_GSTIN(string GSTIN)
        {
            GSTIN = GSTIN == "NA" ? "" : GSTIN;
            var result = db.usp_CustomerAddress_Dtls_by_GSTIN(GSTIN).ToList<usp_CustomerAddress_Dtls_by_GSTIN_Result>();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult GET_STATE_LIMITS_BY_PIN(string S_PIN, string D_PIN)
        {
            string[] result = new string[3];

            result = new DAL_ConsignmentNote().GET_STATE_LIMITS_BY_PIN(S_PIN, D_PIN);

            return Json(result, JsonRequestBehavior.AllowGet);
        }

       
        [HttpPost]
        public JsonResult VALIDATE_AND_INSERT_CUSTOMER_MST(VM_Customer_GSTIN_Data objVM_Customer_GSTIN_Data)
        {
            
            string result = "";

            result = new DAL_ConsignmentNote().VALIDATE_AND_INSERT_CUSTOMER_MST(objVM_Customer_GSTIN_Data);

            return Json(result, JsonRequestBehavior.AllowGet);

        }

        // Added by Gaurav - 22-10-2021
        public JsonResult CnorList()
        {

            SelectList CNOR_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "1") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");

            return Json(CNOR_list, JsonRequestBehavior.AllowGet);
        }

        // Added by Gaurav - 22-10-2021
        public JsonResult CneeList()
        {
            SelectList CNEE_list = new SelectList(db.Tbl_Customer_Mst.Where(x => (x.CUST_TYPE == "0" || x.CUST_TYPE == "2") && x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");

            return Json(CNEE_list, JsonRequestBehavior.AllowGet);
        }

        #endregion


    }
}


___________________________________________________________RevenueController.cs____________________________________________________________________

using MVCConsignment.Models;
using MVCConsignment.UnitOfWorks;
using MVCConsignment.ViewModel;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using Microsoft.Reporting.WebForms;
using System.Transactions;
using System.Data;
using MVCConsignment.App_Code.FAMS;

namespace MVCConsignment.Controllers
{
    public class RevenueController : BaseController
    {
        CALYX_LOGISEntities db = null;
        IUnitOfWork UOW = null;
        HRMEntities dbHRM = new HRMEntities();
        CommonFunction comm = null;
        public RevenueController(DbContext db1, IUnitOfWork iow)
        {
            UOW = iow;
            db = (CALYX_LOGISEntities)db1;
            comm = new CommonFunction(db, UOW);
        }

        public ActionResult BillGeneration()
        {
            ViewBag.Header = "Bill Generation";
            VM_Revenue_Docket_Details rdd = new VM_Revenue_Docket_Details();

            rdd.DOC_No = (rdd.DOC_No ?? "");
            rdd.Cont_No = (rdd.Cont_No ?? "");
            rdd.TxtTHC_No = (rdd.TxtTHC_No ?? "");
            rdd.DdlTHC_No = (rdd.DdlTHC_No ?? "");
            rdd.Party_Id = rdd.Party_Id ?? "0";
            rdd.PartyAddressId = rdd.PartyAddressId ?? "0";
            rdd.HiddenTHCNo = rdd.HiddenTHCNo ?? "";
            if (rdd.TxtTHC_No != "")
            {
                rdd.HiddenTHCNo = rdd.TxtTHC_No;
            }
            else if (rdd.DdlTHC_No != "")
            {
                rdd.HiddenTHCNo = rdd.DdlTHC_No;
            }
            rdd.HiddenStateId = rdd.StateId;
            var obj = db.usp_Select_Docket_Details_ForBillGeneration(rdd.From_DocDate, rdd.To_DocDate, rdd.Party_Id, rdd.DOC_No, rdd.Cont_No, Convert.ToDecimal(rdd.PartyAddressId), rdd.HiddenTHCNo).ToList<usp_Select_Docket_Details_ForBillGeneration_Result>();
            List<VM_Docket_Details_ForBillGeneration> dtl = new List<VM_Docket_Details_ForBillGeneration>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Docket_Details_ForBillGeneration { SrNO = item.SrNO, CN_CODE = item.CN_CODE, CN_DATE = item.CN_DATE, VEH_NO = item.VEH_NO, SUB_TOTAL = item.SUB_TOTAL, TOTAL_TAX = item.TOTAL_TAX, GRAND_TOTAL = item.GRAND_TOTAL, DET_DAY = item.DET_DAY ?? 0, BillingPartyName = item.BillingPartyName, THC_ARRV_ID = item.THC_ARRV_ID });
            }
            rdd.Result = dtl;

            rdd.State_list = new SelectList(db.tbl_State_Mst, "STATE_ID", "State_Name");
            rdd.Country_list = new SelectList(db.tbl_Country_Mst, "Country_CODE", "Country_Name");
            rdd.AddressType_list = new SelectList(db.Tbl_AddressType_Mst, "AddressType_Code", "Short_Title");
            return View(rdd);
        }

        [HttpPost]
        public ActionResult BillGeneration(VM_Revenue_Docket_Details rdd)
        {
            ViewBag.Header = "Bill Generation";
            rdd.DOC_No = (rdd.DOC_No ?? "");
            rdd.Cont_No = (rdd.Cont_No ?? "");
            rdd.TxtTHC_No = (rdd.TxtTHC_No ?? "");
            rdd.DdlTHC_No = (rdd.DdlTHC_No ?? "");
            rdd.Party_Id = rdd.Party_Id ?? "0";
            rdd.PartyAddressId = rdd.PartyAddressId ?? "0";
            rdd.HiddenTHCNo = rdd.HiddenTHCNo ?? "";
            if (rdd.TxtTHC_No != "")
            {
                rdd.HiddenTHCNo = rdd.TxtTHC_No;
            }
            else if (rdd.DdlTHC_No != "")
            {
                rdd.HiddenTHCNo = rdd.DdlTHC_No;
            }
            rdd.HiddenStateId = rdd.StateId;
            var obj = db.usp_Select_Docket_Details_ForBillGeneration(rdd.From_DocDate, rdd.To_DocDate, rdd.Party_Id, rdd.DOC_No, rdd.Cont_No, Convert.ToDecimal(rdd.PartyAddressId), rdd.HiddenTHCNo).ToList<usp_Select_Docket_Details_ForBillGeneration_Result>();
            List<VM_Docket_Details_ForBillGeneration> dtl = new List<VM_Docket_Details_ForBillGeneration>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Docket_Details_ForBillGeneration { SrNO = item.SrNO, CN_CODE = item.CN_CODE, CN_DATE = item.CN_DATE, VEH_NO = item.VEH_NO, SUB_TOTAL = item.SUB_TOTAL, TOTAL_TAX = item.TOTAL_TAX, GRAND_TOTAL = item.GRAND_TOTAL, DET_DAY = item.DET_DAY ?? 0, BillingPartyName = item.BillingPartyName, THC_ARRV_ID = item.THC_ARRV_ID });
            }
            rdd.Result = dtl;
            if (obj.Count() > 0)
            {
                rdd.HiddenPartyId = obj.FirstOrDefault().BILL_PARTY_ID.ToString() ?? "0";
                rdd.Party_Id = obj.FirstOrDefault().BILL_PARTY_ID.ToString() ?? "0";
                decimal CUST_ID = obj.FirstOrDefault().BILL_PARTY_ID ?? 0;
                var s = db.Tbl_Customer_Mst.Where(x => x.CUST_ID == CUST_ID).ToList();
                rdd.PartyName = s.FirstOrDefault().CUST_NAME;
                rdd.PartyPan = s.FirstOrDefault().PAN_NO;

                decimal addressId = obj.FirstOrDefault().BILL_PARTY_ADDR_ID ?? 0;
                var addr = db.Tbl_Customer_Address_Dtls.Where(x => x.CUSTADD_ID == addressId);
                rdd.PartyAddressId = obj.FirstOrDefault().BILL_PARTY_ADDR_ID.ToString() ?? "0";
                rdd.HiddenPartyAddressId = obj.FirstOrDefault().BILL_PARTY_ADDR_ID.ToString() ?? "0";
                string partyAddress = "";
                if (addr.Count() > 0)
                {
                    rdd.HiddenStateId = addr.FirstOrDefault().STATE_ID.ToString() ?? "0";
                    partyAddress = (addr.FirstOrDefault().ADDRESS1 ?? "") + ", " + (addr.FirstOrDefault().ADDRESS2 ?? "") +
                    ", City: " + (addr.FirstOrDefault().tbl_city_Mst.city_Name) + ", PIN: " + (addr.FirstOrDefault().PINCODE ?? "") +
                    ", State: " + (addr.FirstOrDefault().tbl_State_Mst.State_Name ?? "") + ", Country: " + (addr.FirstOrDefault().tbl_Country_Mst.Country_Name ?? "");
                    rdd.PartyAddress = partyAddress;
                    rdd.HiddenPartyAddress = partyAddress;
                    rdd.GSTIN = (addr.FirstOrDefault().GSTIN ?? "");
                    rdd.HiddenGSTIN = (addr.FirstOrDefault().GSTIN ?? "");
                }

            }
            rdd.City_list = new SelectList(db.tbl_city_Mst, "NCITY_CODE", "CITY_Name");
            rdd.State_list = new SelectList(db.tbl_State_Mst, "STATE_ID", "State_Name");
            rdd.Country_list = new SelectList(db.tbl_Country_Mst, "Country_CODE", "Country_Name");
            rdd.AddressType_list = new SelectList(db.Tbl_AddressType_Mst, "AddressType_Code", "Short_Title");

            var company = db.tbl_Company_Mst.Where(c => c.Comp_Code == "CO00000001").ToList();
            rdd.HiddenCompanyStateId = company.FirstOrDefault().State_ID;
            return View(rdd);
        }

        public ActionResult SelectedDocket(string partyId, string doctNos, string addrId)
        {
            var obj = db.usp_Select_Docket_Details_ForBillGeneration(null, null, partyId, "", "", 0, "").ToList<usp_Select_Docket_Details_ForBillGeneration_Result>();
            string[] arrDoctNo = doctNos.Split(',');

            List<VM_Docket_Details_ForBillGeneration> dtl = new List<VM_Docket_Details_ForBillGeneration>();
            foreach (var item in obj)
            {
                foreach (string doctNo in arrDoctNo)
                {
                    if (doctNo.Trim() == item.CN_CODE.Trim())
                        dtl.Add(new VM_Docket_Details_ForBillGeneration { SrNO = item.SrNO, CN_CODE = item.CN_CODE, CN_DATE = item.CN_DATE, VEH_NO = item.VEH_NO, SUB_TOTAL = item.SUB_TOTAL, TOTAL_TAX = item.TOTAL_TAX, GRAND_TOTAL = item.GRAND_TOTAL, CONTAINER_NO = item.CONTAINER_NO, CONTAINER_SIZE = item.CONTAINER_SIZE, DET_DAY = item.DET_DAY ?? 0, RANK = item.RNK ?? 0 });
                }
            }
            return Json(dtl, JsonRequestBehavior.AllowGet);
        }


        public ActionResult BillGenerationEntry(string billNo, string billDate, string partyId, string stateId, string gstin, string addrId, string address, string billAmt, string taxAmt, string totAmt, string amtInWords, String remarks, string companyStateId, IList<BillGeneration_Dtls> doctNos)
        {
            try
            {
                using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead }))
                {
                    Tbl_BillGeneration_hdr bgHdr = new Tbl_BillGeneration_hdr();

                    bgHdr.BILL_NO = db.usp_Auto_Alphanumeric_Code("Log.Tbl_BillGeneration_hdr", "BILL_NO", "INV/" + DateTime.Now.ToString("yy") + "/", 6).ToList<usp_Auto_Alphanumeric_Code_Result>().First().AutoCode;
                    // bgHdr.BILL_NO = "INV/" + DateTime.Now.ToString("yy") + "/" + billNo;
                    bgHdr.BILL_DATE = Convert.ToDateTime(billDate);
                    bgHdr.PARTY_ID = Convert.ToInt32(partyId);
                    bgHdr.STATE_ID = stateId;
                    bgHdr.GSTIN = gstin;
                    bgHdr.AMOUNT_INWORDS = amtInWords;
                    bgHdr.AMOUNT = Convert.ToDecimal(totAmt);
                    bgHdr.BILL_AMT = Convert.ToDecimal(billAmt);
                    bgHdr.TAX_AMT = Convert.ToDecimal(taxAmt);

                    bgHdr.REMARKS = remarks;
                    bgHdr.PARTY_ADDR_ID = Convert.ToDecimal(addrId);
                    bgHdr.PARTY_ADDRESS = address;
                    bgHdr.ADDED_ON = DateTime.Now;
                    bgHdr.Cancel_Status = "N";
                    bgHdr.ADDED_BY = Session["EmployeeCode"].ToString();

                    UOW.Tbl_BillGeneration_hdr_Repository.Insert(bgHdr);

                    Tbl_BillGeneration_Dtls bgDtls = null;

                    foreach (BillGeneration_Dtls item in doctNos)
                    {
                        if (item.CN_CODE.Trim() != "")
                        {
                            bgDtls = new Tbl_BillGeneration_Dtls();
                            bgDtls.CN_CODE = item.CN_CODE.Trim();
                            string HALT_AMT;
                            if ((item.HALT_AMT ?? "").Trim() == "") HALT_AMT = "0";
                            else HALT_AMT = (item.HALT_AMT ?? "").Trim();
                            bgDtls.HALT_AMT = Convert.ToDecimal(HALT_AMT.Trim());

                            string TOTAL_AMT;
                            if ((item.TOTAL_AMT ?? "").Trim() == "") TOTAL_AMT = "0";
                            else TOTAL_AMT = (item.TOTAL_AMT ?? "").Trim();
                            bgDtls.TOTAL_AMT = Convert.ToDecimal(TOTAL_AMT.Trim());

                            bgDtls.BILL_ID = bgHdr.BILL_ID;
                            bgDtls.OTHER_TITLE = (item.OTHER_TITLE ?? "").Trim();

                            string otherAmt;
                            if ((item.OTHER_AMT ?? "").Trim() == "") otherAmt = "0";
                            else otherAmt = (item.OTHER_AMT ?? "").Trim();
                            bgDtls.OTHER_AMT = Convert.ToDecimal(otherAmt);

                            string AMOUNT;
                            if ((item.AMOUNT ?? "").Trim() == "") AMOUNT = "0";
                            else AMOUNT = (item.AMOUNT ?? "").Trim();

                            bgDtls.AMOUNT = Convert.ToDecimal(AMOUNT);
                            UOW.Tbl_BillGeneration_Dtls_Repository.Insert(bgDtls);
                        }
                    }

                    decimal sgtaxAmt = 0, cgtaxAmt = 0, igtaxAmt = 0;
                    if (doctNos.Max(x => x.SGST_ID) > 0 && (bgHdr.GSTIN.Trim() == ""))
                    {
                        if ((bgHdr.STATE_ID == companyStateId) || (bgHdr.GSTIN == ""))
                        {
                            //SGST tax
                            Tbl_BillGeneration_Tax sgtax = new Tbl_BillGeneration_Tax();
                            sgtax.BILL_Id = bgHdr.BILL_ID;
                            sgtax.Tax_Id = doctNos.Max(x => x.SGST_ID);
                            sgtax.Tax_Per = doctNos.Max(x => x.SGST_PER);
                            sgtax.Tax_OnAmt = bgHdr.BILL_AMT;
                            sgtax.Tax_Amt = (bgHdr.BILL_AMT * sgtax.Tax_Per) / 100;
                            sgtaxAmt = sgtax.Tax_Amt ?? 0;
                            UOW.Tbl_BillGeneration_Tax_Repository.Insert(sgtax);
                            //CGST tax
                            Tbl_BillGeneration_Tax cgtax = new Tbl_BillGeneration_Tax();
                            cgtax.BILL_Id = bgHdr.BILL_ID;
                            cgtax.Tax_Id = doctNos.Max(x => x.CGST_ID);
                            cgtax.Tax_Per = doctNos.Max(x => x.CGST_PER);
                            cgtax.Tax_OnAmt = bgHdr.BILL_AMT;
                            cgtax.Tax_Amt = (bgHdr.BILL_AMT * cgtax.Tax_Per) / 100;
                            cgtaxAmt = cgtax.Tax_Amt ?? 0;
                            UOW.Tbl_BillGeneration_Tax_Repository.Insert(cgtax);
                        }
                        else
                        {
                            //IGST tax

                            Tbl_BillGeneration_Tax igtax = new Tbl_BillGeneration_Tax();
                            igtax.BILL_Id = bgHdr.BILL_ID;
                            igtax.Tax_Id = doctNos.Max(x => x.IGST_ID);
                            igtax.Tax_Per = doctNos.Max(x => x.IGST_PER);
                            igtax.Tax_OnAmt = bgHdr.BILL_AMT;
                            igtax.Tax_Amt = (bgHdr.BILL_AMT * igtax.Tax_Per) / 100;
                            igtaxAmt = igtax.Tax_Amt ?? 0;
                            UOW.Tbl_BillGeneration_Tax_Repository.Insert(igtax);
                        }
                    }

                    int result = UOW.Save();

                    //Start JV Posting
                    int JvStatus = 0;
                    if (bgHdr.BILL_ID > 0)
                    {
                        using (TransactionScope ts2 = new TransactionScope(TransactionScopeOption.Suppress, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead }))
                        {
                            DataTable dt = new DataTable();
                            DAL_BillPosting post = new DAL_BillPosting();
                            var cust = db.Tbl_Customer_Mst.Where(w => w.CUST_ID == bgHdr.PARTY_ID).FirstOrDefault();
                            List<VM_BillDetails_Posting> BillList = new List<VM_BillDetails_Posting>();

                            BillList.Add(new VM_BillDetails_Posting()
                            {
                                BILL_ID = bgHdr.BILL_ID,
                                BILL_NO = bgHdr.BILL_NO,
                                BILL_DATE = bgHdr.BILL_DATE.Value.ToString("dd/MM/yyyy"),
                                CUST_CODE = cust.CUST_CODE,
                                CUST_NAME = cust.CUST_NAME,
                                AMOUNT = doctNos.Sum(s => Convert.ToDecimal((s.AMOUNT ?? "0") == "" ? "0" : s.AMOUNT)),
                                HALT_AMT = doctNos.Sum(s => Convert.ToDecimal((s.HALT_AMT ?? "0") == "" ? "0" : s.HALT_AMT)),
                                CGST_AMT = cgtaxAmt,
                                SGST_AMT = sgtaxAmt,
                                IGST_AMT = igtaxAmt,
                                OTHER_AMT = doctNos.Sum(s => Convert.ToDecimal((s.OTHER_AMT ?? "0") == "" ? "0" : s.OTHER_AMT)),
                                BillAmount = doctNos.Sum(s => Convert.ToDecimal((s.AMOUNT ?? "0") == "" ? "0" : s.AMOUNT)) + doctNos.Sum(s => Convert.ToDecimal((s.HALT_AMT ?? "0") == "" ? "0" : s.HALT_AMT)) + doctNos.Sum(s => Convert.ToDecimal((s.OTHER_AMT ?? "0") == "" ? "0" : s.OTHER_AMT)) + cgtaxAmt + sgtaxAmt + igtaxAmt,
                                ADDED_BY = Session["EmployeeCode"].ToString(),
                                IsChecked = true
                            });

                            SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
                            string BranchCode = Convert.ToString(LogIn.Branch_Code);

                            dt = post.Insert_FA_BillPosting(Session["EmployeeCode"].ToString(), "CO00000001", BranchCode, BillList);
                            if (dt.Rows.Count == 0)
                            {
                                JvStatus = 1;
                                ts2.Complete();
                            }
                        }
                    }
                    //End JV Posting
                    if (result > 0 && JvStatus > 0)
                    {
                        ts.Complete();
                        Success(string.Format("<b>Bill generated successfully. Auto generated Bill No. is '" + bgHdr.BILL_NO + "'</b>"), true);
                    }
                    else
                    {
                        Danger(string.Format("<b>Bill Generation failed.</b>"), true);
                    }
                }
            }
            catch (Exception ex)
            {
                Danger(string.Format("<b>Exception occurred.</b>"), true);
            }
            return Json("ok", JsonRequestBehavior.AllowGet);
        }

        public class BillGeneration_Dtls
        {
            public string CN_CODE { get; set; }
            public string HALT_AMT { get; set; }
            public string OTHER_TITLE { get; set; }
            public string OTHER_AMT { get; set; }
            public string AMOUNT { get; set; }
            public string TOTAL_AMT { get; set; }
            public int SGST_ID { get; set; }
            public decimal SGST_PER { get; set; }
            public int CGST_ID { get; set; }
            public decimal CGST_PER { get; set; }
            public int IGST_ID { get; set; }
            public decimal IGST_PER { get; set; }
        }

        public JsonResult CheckingBillNo(string billNo)
        {
            billNo = "INV/" + DateTime.Now.ToString("yy") + "/" + billNo;
            var obj = UOW.Tbl_BillGeneration_hdr_Repository.FindBy(x => x.BILL_NO == billNo);

            return Json((obj.Count() == 0) ? false : true, JsonRequestBehavior.AllowGet);
        }

        public ActionResult BillSubmission()
        {
            ViewBag.Header = "Bill Submission";
            VM_Revenue_Bill_Details rdd = new VM_Revenue_Bill_Details();
            return View(rdd);
        }

        [HttpPost]
        public ActionResult BillSubmission(VM_Revenue_Bill_Details rdd)
        {
            ViewBag.Header = "Bill Submission";
            decimal partyID = Convert.ToDecimal(rdd.PartyId);
            if (rdd.PartyId != "")
            {
                var vend = db.Tbl_Customer_Mst.Where(x => x.CUST_ID == partyID).FirstOrDefault();
                rdd.CreditDay = Convert.ToInt32(vend.CREDEIT_DAYS == null ? 0 : vend.CREDEIT_DAYS);
                rdd.DueBy = vend.BASED_ON == "BG" ? "Bill Generation" : "Bill Submission";
            }

            var obj = db.usp_Select_Bill_Details_ForBillSubmission(rdd.FromBillDate, rdd.ToBillDate, rdd.PartyId).ToList<usp_Select_Bill_Details_ForBillSubmission_Result>();
            List<VM_Bill_Details_ForBillSubmission> dtl = new List<VM_Bill_Details_ForBillSubmission>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Bill_Details_ForBillSubmission { SrNO = item.SrNO, BILL_ID = item.BILL_ID, BILL_NO = item.BILL_NO, BILL_DATE = item.BILL_DATE, CUST_NAME = item.CUST_NAME, AMOUNT = item.AMOUNT });
            }
            rdd.Result = dtl;

            return View(rdd);
        }

        public ActionResult BillSubmissionEntry(string submissionDate, string dueBy, string partyId, string creditDay, string submittedBy, String remarks, string billIds, string billDates)
        {
            //System.Threading.Thread.Sleep(5000);
            if (creditDay.Trim() == "") creditDay = "0";
            Tbl_BillSubmission_hdr bsHdr = new Tbl_BillSubmission_hdr();
            bsHdr.SUBMISSION_DATE = Convert.ToDateTime(submissionDate);
            bsHdr.DUE_BY = dueBy;
            bsHdr.PARTY_ID = Convert.ToInt32(partyId);
            bsHdr.CREDIT_DAY = Convert.ToInt32(creditDay);
            bsHdr.SUBMITTED_BY = submittedBy;
            bsHdr.REMARKS = remarks;
            bsHdr.ADDED_ON = DateTime.Now;
            bsHdr.ADDED_BY = Session["EmployeeCode"].ToString();

            UOW.Tbl_BillSubmission_hdr_Repository.Insert(bsHdr);
            string[] arrbillId = billIds.Split(',');
            string[] arrbillDate = billDates.Split(',');
            int i = 0, count = 0;
            Tbl_BillSubmission_Dtls bsDtls = null;

            foreach (string item in arrbillId)
            {
                if (item.Trim() != "")
                {
                    bsDtls = new Tbl_BillSubmission_Dtls();
                    bsDtls.BILL_ID = Convert.ToDecimal(item.Trim());
                    bsDtls.SUB_ID = bsHdr.SUB_ID;
                    if (dueBy == "Bill Submission")
                    {
                        bsDtls.DUE_DATE = Convert.ToDateTime(submissionDate).AddDays(Convert.ToInt32(creditDay));
                    }
                    else
                    {
                        string[] date = arrbillDate[i].Split('/');
                        DateTime billDate = new DateTime(Convert.ToInt32(date[2].Trim()), Convert.ToInt32(date[1].Trim()), Convert.ToInt32(date[0].Trim()), 0, 0, 0);
                        bsDtls.DUE_DATE = billDate.AddDays(Convert.ToInt32(creditDay));
                    }
                    var det = db.Tbl_BillSubmission_Dtls.Where(b => b.BILL_ID == bsDtls.BILL_ID);
                    if (det.Count<Tbl_BillSubmission_Dtls>() == 0)
                    {
                        UOW.Tbl_BillSubmission_Dtls_Repository.Insert(bsDtls);
                    }
                    else
                    {
                        count++;
                    }
                }
                i++;
            }
            if (count == 0)
            {
                int result = UOW.Save();
                if (result > 0)
                {
                    Success(string.Format("<b>Bill submitted successfully.</b>"), true);
                }
                else
                {
                    Danger(string.Format("<b>Bill submission failed.</b>"), true);
                }
            }
            else
            {
                Danger(string.Format("<b>Already exists.</b>"), true);
            }
            return Json("ok", JsonRequestBehavior.AllowGet);
        }

        public ActionResult AdvanceReceipt()
        {
            //ViewBag.Header = "Advance Receipt";
            ViewBag.Header = "Receipt";
            VM_AdvanceReceipt ar = new VM_AdvanceReceipt();
            //Added by Ashok Date: 24-12-2022
            SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
            if (LogIn != null)
            {  
                ar.LocationList = new SelectList(db.tbl_Location_Mst.Where(x=>x.LOGIN_BRANCH_CODE == LogIn.Branch_Code), "LOC_ID", "LOC_NAME");
            }
            
            return View(ar);
        }

        public JsonResult ConsignmentNote_List(decimal PartyId,string MOVE_BY)
        {
            var item = db.usp_GetConsignmentCode_Receipt(PartyId, MOVE_BY);
            return Json(item, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult BillAdvanceReceiptEntry(VM_AdvanceReceipt advanceReceipt)
        {
            //ViewBag.Header = "Advance Receipt";
            ViewBag.Header = "Receipt";
            if (advanceReceipt.Amount.Trim() == "") advanceReceipt.Amount = "0";

            Tbl_AdvanceReceipt_hdr arHdr = new Tbl_AdvanceReceipt_hdr();
            arHdr.RECEIPT_DATE = Convert.ToDateTime(advanceReceipt.ReceiptDate);
            arHdr.PARTY_ID = Convert.ToInt32(advanceReceipt.PartyId);
            arHdr.AMOUNT = Convert.ToDecimal(advanceReceipt.Amount);
            arHdr.PAY_MODE = advanceReceipt.PayMode;
            arHdr.PAY_DETAILS = advanceReceipt.PaymentDetails;
            arHdr.ADDED_ON = DateTime.Now;
            arHdr.ADDED_BY = Session["EmployeeCode"].ToString();
            arHdr.CN_ID = advanceReceipt.CN_ID;
            string TdsAmt = "0";
            if ((advanceReceipt.TdsAmount ?? "").Trim() == string.Empty) TdsAmt = "0";
            else TdsAmt = advanceReceipt.TdsAmount;
            arHdr.TDS_AMOUNT = Convert.ToDecimal(TdsAmt);

            string TotalAmt = "0";
            if ((advanceReceipt.TotalAmount ?? "").Trim() == string.Empty) TotalAmt = "0";
            else TotalAmt = advanceReceipt.TotalAmount;
            arHdr.TOTAL_AMOUNT = Convert.ToDecimal(TotalAmt);
            arHdr.MOVE_BY = Convert.ToString(advanceReceipt.ReceiptFor); //---- Added By : Ashish Kalsarpe--- Date :07/01/2020

            //Added by Ashok Date: 24-03-2022
            SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
            if (LogIn != null)
            {
                arHdr.LOGIN_BRANCH = LogIn.Branch_Code;
            }

            arHdr.LOC_ID = advanceReceipt.BookingLocId;


            UOW.Tbl_AdvanceReceipt_hdr_Repository.Insert(arHdr);

            DataTable dtchk = new DataTable();
            dtchk.Columns.Add(new DataColumn("ChqNo", typeof(string)));
            dtchk.Columns.Add(new DataColumn("ChqDate", typeof(string)));
            dtchk.Columns.Add(new DataColumn("BankName", typeof(string)));
            dtchk.Columns.Add(new DataColumn("PayMode", typeof(string)));
            dtchk.Columns.Add(new DataColumn("ChqAmt", typeof(double)));


            if (arHdr.PAY_MODE != "Cash")
            {
                Tbl_AdvanceReceipt_Dtls arDtls = null;
                foreach (VM_AdvanceReceipt_Bank item in advanceReceipt.AdvanceReceipt_Bank)
                {
                    if (item.Amount != null)
                    {
                        arDtls = new Tbl_AdvanceReceipt_Dtls();
                        arDtls.ADV_ID = arHdr.ADV_ID;
                        arDtls.CHQ_RTGS_DD_NO = item.Number;
                        arDtls.CHQ_RTGS_DD_DATE = Convert.ToDateTime(item.Date);
                        arDtls.BANK_ID = Convert.ToInt32(item.BankName);
                        arDtls.AMOUNT = Convert.ToDecimal(item.Amount);

                        string TdsAmt1 = "0";
                        if ((item.TdsAmount ?? "").Trim() == string.Empty) TdsAmt1 = "0";
                        else TdsAmt1 = item.TdsAmount;
                        arDtls.TDS_AMOUNT = Convert.ToDecimal(TdsAmt1);

                        UOW.Tbl_AdvanceReceipt_Dtls_Repository.Insert(arDtls);

                        dtchk.Rows.Add(new Object[] { arDtls.CHQ_RTGS_DD_NO, arDtls.CHQ_RTGS_DD_DATE.Value.ToString("dd/MM/yyyy"), arDtls.BANK_ID.ToString(), arHdr.PAY_MODE, arDtls.AMOUNT });

                    }
                }
            }

            Tbl_AdvanceReceipt_CN_Adjust cnDtls = null;
            foreach (VM_AdvanceReceipt_CN_Adjust item in advanceReceipt.AdvCN_Adjust)
            {
                decimal ADJ_AMOUNT = Convert.ToDecimal(item.ADJ_AMOUNT ?? "0");
                if (ADJ_AMOUNT > 0)
                {
                    cnDtls = new Tbl_AdvanceReceipt_CN_Adjust();
                    cnDtls.ADV_ID = arHdr.ADV_ID;
                    cnDtls.CN_ID = Convert.ToDecimal(item.CN_ID);
                    cnDtls.ADJ_AMOUNT = Convert.ToDecimal(item.ADJ_AMOUNT);
                    UOW.Tbl_AdvanceReceipt_CN_Adjust_Repository.Insert(cnDtls);
                }
            }

            int result = UOW.Save();
            if (result > 0)
            { 
                string BranchCode = Convert.ToString(LogIn.Branch_Code);

                //if (advanceReceipt.ReceiptFor == "O")
                //{
                    DataTable PostingTable;
                    PostingTable = new DataTable();

                    PostingTable.Columns.Add("srNo", typeof(Int32));
                    PostingTable.Columns.Add("JTrans", typeof(String));
                    PostingTable.Columns.Add("JAcccode", typeof(String));
                    PostingTable.Columns.Add("Amount", typeof(Double));

                    string Narration = "", JType = "", PAYMENT_MODE = "", rec_Bank = "";
                    DAL_ReceiptPosting Posting = new DAL_ReceiptPosting();
                    string PartyCode = db.Tbl_Customer_Mst.Where(x => x.CUST_ID == arHdr.PARTY_ID).FirstOrDefault().CUST_CODE;


                    if (arHdr.PAY_MODE == "Cash")
                    {
                        PostingTable.Rows.Add(new object[] { 1, "C", "392", Convert.ToDouble(arHdr.TOTAL_AMOUNT) });
                        PostingTable.Rows.Add(new object[] { 2, "D", "44", Convert.ToDouble(arHdr.AMOUNT) });
                        if (Convert.ToDouble(arHdr.TDS_AMOUNT) > 0)
                            PostingTable.Rows.Add(new object[] { 3, "D", "820", Convert.ToDouble(arHdr.TDS_AMOUNT) });

                        Narration = "Being Cash Received Against Receipt No.:" + arHdr.ADV_ID + " Dated On " + arHdr.RECEIPT_DATE.Value.ToString("dd/MM/yyyy");
                        JType = "R";

                        Posting.Insert_FA_ReceiptPosting(Session["EmployeeCode"].ToString(), "CO00000001", BranchCode , Narration, JType, arHdr.RECEIPT_DATE.Value.ToString("dd/MM/yyyy"), PAYMENT_MODE, PartyCode, "", "", "", Convert.ToString(arHdr.ADV_ID), PostingTable, arHdr.PAY_MODE, dtchk, rec_Bank);
                    }
                    else if (arHdr.PAY_MODE == "RTGS")
                    {
                        PostingTable.Rows.Add(new object[] { 1, "C", "392", Convert.ToDouble(arHdr.TOTAL_AMOUNT) });
                        PostingTable.Rows.Add(new object[] { 2, "D", "45", Convert.ToDouble(arHdr.AMOUNT) });
                        if (Convert.ToDouble(arHdr.TDS_AMOUNT) > 0)
                            PostingTable.Rows.Add(new object[] { 3, "D", "820", Convert.ToDouble(arHdr.TDS_AMOUNT) });

                        Narration = "Being RTGS No.: " + dtchk.Rows[0]["ChqNo"].ToString() + " Received Against Receipt No.:" + arHdr.ADV_ID + " Dated On " + arHdr.RECEIPT_DATE.Value.ToString("dd/MM/yyyy");
                        JType = "R";
                        PAYMENT_MODE = "B2";
                        //rec_Bank = "0000603505015482";  // Hard Coded Bank Name for received rtgs  
                        rec_Bank = advanceReceipt.BankAcountNo;

                        Posting.Insert_FA_ReceiptPosting(Session["EmployeeCode"].ToString(), "CO00000001", BranchCode , Narration, JType,
                        dtchk.Rows[0]["ChqDate"].ToString(), PAYMENT_MODE, PartyCode, dtchk.Rows[0]["BankName"].ToString(),
                        dtchk.Rows[0]["ChqNo"].ToString(), dtchk.Rows[0]["ChqDate"].ToString(), Convert.ToString(arHdr.ADV_ID), PostingTable, arHdr.PAY_MODE, dtchk, rec_Bank);
                    }
                    else if (arHdr.PAY_MODE == "Cheque" || arHdr.PAY_MODE == "DD")
                    {
                        PostingTable.Rows.Add(new object[] { 1, "C", "478", Convert.ToDouble(arHdr.AMOUNT) });
                        PostingTable.Rows.Add(new object[] { 2, "D", "405", Convert.ToDouble(arHdr.AMOUNT) });
                        Narration = "Being Cheque No.: " + dtchk.Rows[0]["ChqNo"].ToString() + " Received Against Receipt No.:" + arHdr.ADV_ID + " Dated On " + arHdr.RECEIPT_DATE.Value.ToString("dd/MM/yyyy");
                        JType = "J";
                        PAYMENT_MODE = "B";

                        Posting.Insert_FA_ReceiptPosting(Session["EmployeeCode"].ToString(), "CO00000001", BranchCode , Narration, JType,
                        dtchk.Rows[0]["ChqDate"].ToString(), PAYMENT_MODE, PartyCode, dtchk.Rows[0]["BankName"].ToString(),
                        dtchk.Rows[0]["ChqNo"].ToString(), dtchk.Rows[0]["ChqDate"].ToString(), Convert.ToString(arHdr.ADV_ID), PostingTable, arHdr.PAY_MODE, dtchk, rec_Bank);

                    }
                //}               

                Success(string.Format("<b>Advance Receipt submitted successfully.</b>"), true);
            }
            else
            {
                Danger(string.Format("<b>Advance Receipt submission failed.</b>"), true);
            }
            return Json("ok", JsonRequestBehavior.AllowGet);
        }

        public ActionResult BindGSTINList(string partyId, string stateId)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            int CUST_ID = int.Parse(partyId == "" ? "0" : partyId);

            var s = db.Tbl_Customer_Address_Dtls.Where(x => x.CUST_ID == CUST_ID && x.STATE_ID == stateId);
            return Json(new SelectList(s, "CUSTADD_ID", "GSTIN"), JsonRequestBehavior.AllowGet);
        }

        public JsonResult PartyAddress(string addrId)
        {
            addrId = (addrId.Trim() != "") ? addrId : "0";
            int addr_Id = int.Parse(addrId);
            VM_Customer_Address_Dtls item = new VM_Customer_Address_Dtls();
            var s = db.Tbl_Customer_Address_Dtls.Where(x => x.CUSTADD_ID == addr_Id);

            if (s.Count() > 0)
            {
                item.CUSTADD_ID = s.FirstOrDefault().CUSTADD_ID;
                item.ADDRESS_TYPE_CODE = s.FirstOrDefault().ADDRESS_TYPE_CODE ?? "";
                item.ADDRESS1 = s.FirstOrDefault().ADDRESS1 ?? "";
                item.ADDRESS2 = s.FirstOrDefault().ADDRESS2 ?? "";
                item.COUNTRY_CODE = s.FirstOrDefault().COUNTRY_CODE ?? "";

                item.STATE_ID = s.FirstOrDefault().tbl_State_Mst.State_ID ?? "";
                item.NCITY_CODE = s.FirstOrDefault().NCITY_CODE;
                item.PINCODE = s.FirstOrDefault().PINCODE ?? "";
                item.COMP_TEL_NO = s.FirstOrDefault().COMP_TEL_NO ?? "";
                item.COMP_FAX_NO = s.FirstOrDefault().COMP_FAX_NO ?? "";
                item.COMP_EMAIL = s.FirstOrDefault().COMP_EMAIL ?? "";
                item.GST_NO = s.FirstOrDefault().GSTIN ?? "";
                item.CONTACT_PERSON = s.FirstOrDefault().CONTACT_PERSON ?? "";
                item.TEL_NO = s.FirstOrDefault().TEL_NO ?? "";
                item.MOBILE_NO = s.FirstOrDefault().MOBILE_NO ?? "";
                item.EMAIL = s.FirstOrDefault().EMAIL ?? "";
                string GSTIN = (s.FirstOrDefault().GSTIN ?? "");
                if (GSTIN.Trim() != "")
                {
                    item.GST_1 = GSTIN.Substring(GSTIN.Length - 3, 1);
                    item.GST_3 = GSTIN.Substring(GSTIN.Length - 1, 1);
                }
            }
            return Json(item, JsonRequestBehavior.AllowGet);
        }

        public ActionResult BindGSTINAddressList(string partyId)
        {
            partyId = (partyId == "") ? "0" : partyId;
            int CUST_ID = int.Parse(partyId);
            var s = db.Tbl_Customer_Address_Dtls.Where(x => x.CUST_ID == CUST_ID);
            return Json(new SelectList(s, "CUSTADD_ID", "CUSTADD_ID"), JsonRequestBehavior.AllowGet);
        }


        public ActionResult AddUpdateGSTIN(VM_Customer_Address_Dtls addr)
        {
            Tbl_Customer_Address_Dtls upAddr = new Tbl_Customer_Address_Dtls();

            //var s = db.tbl_State_Mst.Where(x => x.State_ID == addr.STATE_ID);
            //addr.STATE_CODE = s.FirstOrDefault().State_Code;
            int result = 0;
            upAddr.GSTIN = addr.GST_NO;
            upAddr.CUSTADD_ID = addr.CUSTADD_ID;
            upAddr.CUST_ID = addr.CUST_ID;
            upAddr.ADDRESS_TYPE_CODE = addr.ADDRESS_TYPE_CODE;
            upAddr.ADDRESS1 = addr.ADDRESS1;
            upAddr.ADDRESS2 = addr.ADDRESS2;
            upAddr.COUNTRY_CODE = addr.COUNTRY_CODE;
            upAddr.STATE_ID = addr.STATE_ID;
            upAddr.NCITY_CODE = addr.NCITY_CODE;
            upAddr.PINCODE = addr.PINCODE;
            upAddr.COMP_TEL_NO = addr.COMP_TEL_NO;
            upAddr.COMP_FAX_NO = addr.COMP_FAX_NO;
            upAddr.COMP_EMAIL = addr.COMP_EMAIL;
            upAddr.CONTACT_PERSON = addr.CONTACT_PERSON;
            upAddr.TEL_NO = addr.TEL_NO;
            upAddr.MOBILE_NO = addr.MOBILE_NO;
            upAddr.EMAIL = addr.EMAIL;
            upAddr.ADDEDON = DateTime.Now;
            upAddr.ADDEDBY = Session["EmployeeCode"].ToString();
            upAddr.STATUS = "Y";
            if (addr.CUSTADD_ID > 0)
            {
                UOW.CustomerAddressRepository.Update(upAddr, o => o.GSTIN);
            }
            else
            {
                UOW.CustomerAddressRepository.Insert(upAddr);
            }
            string msg = "";

            result = UOW.Save();

            if (result > 0)
            {
                msg = "ok";
            }
            else
            {
                msg = "failed";
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }

        public JsonResult PartyAddressBasedOnGSTIN(string addrId)
        {
            addrId = (addrId.Trim() != "") ? addrId : "0";
            int addr_Id = int.Parse(addrId);
            var s = db.Tbl_Customer_Address_Dtls.Where(x => x.CUSTADD_ID == addr_Id);
            string partyAddress = "";
            if (s.Count() > 0)
            {
                partyAddress = (s.FirstOrDefault().ADDRESS1 ?? "") + ", " + (s.FirstOrDefault().ADDRESS2 ?? "") +
                ", City: " + (s.FirstOrDefault().tbl_city_Mst.city_Name) + ", PIN: " + (s.FirstOrDefault().PINCODE ?? "") +
                ", State: " + (s.FirstOrDefault().tbl_State_Mst.State_Name ?? "") + ", Country: " + (s.FirstOrDefault().tbl_Country_Mst.Country_Name ?? "");

            }
            return Json(partyAddress, JsonRequestBehavior.AllowGet);
        }

        public JsonResult CheckingBillNoForPrint(string billNo)
        {
            //Added By Ashok, Date : 07/04/2021
            if (billNo.Length != 16)
            {
                billNo = "INV/" + billNo;
            }

            //billNo = "INV/" + billNo;
            var obj = UOW.Tbl_BillGeneration_hdr_Repository.FindBy(x => x.BILL_NO == billNo);

            return Json((obj.Count() == 0) ? false : true, JsonRequestBehavior.AllowGet);
        }


        //----Modify By : Ashish Kalsarpe --- Date :19/10/2019 ----
        //---- Description : MOVEMENT BY  added For Invoice Print.
        public ActionResult ConsignmentBill(string billNo)
        {
            VM_Bill_Details_ForPrint item = new VM_Bill_Details_ForPrint();
            var s = db.usp_Select_Bill_Details_ForPrint(billNo).ToList<usp_Select_Bill_Details_ForPrint_Result>();

            if (s.Count() > 0)
            {
                item.PARTY_ID = s.FirstOrDefault().PARTY_ID;
                item.BILL_ID = s.FirstOrDefault().BILL_ID.ToString();
                item.BILL_NO = s.FirstOrDefault().BILL_NO ?? "";
                item.BILL_DATE = s.FirstOrDefault().BILL_DATE ?? "";
                item.AMOUNT = Convert.ToString(s.FirstOrDefault().AMOUNT);
                item.CUST_NAME = s.FirstOrDefault().CUST_NAME ?? "";
                item.PARTY_ADDRESS = s.FirstOrDefault().PARTY_ADDRESS ?? "";
                item.AMOUNT_INWORDS = s.FirstOrDefault().AMOUNT_INWORDS ?? "";
                item.REMARKS = s.FirstOrDefault().REMARKS ?? "";
                item.GSTIN = s.FirstOrDefault().GSTIN ?? "";
                item.ADDRESS1 = s.FirstOrDefault().ADDRESS1 ?? "";
                item.ADDRESS2 = s.FirstOrDefault().ADDRESS2 ?? "";
                item.State_Name = s.FirstOrDefault().State_Name ?? "";
                item.city_Name = s.FirstOrDefault().city_Name;
                item.PINCODE = s.FirstOrDefault().PINCODE ?? "";
                item.COMP_TEL_NO = s.FirstOrDefault().COMP_TEL_NO ?? "";
                item.COMP_FAX_NO = s.FirstOrDefault().COMP_FAX_NO ?? "";
                item.COMP_EMAIL = s.FirstOrDefault().COMP_EMAIL ?? "";
                item.CONTACT_PERSON = s.FirstOrDefault().CONTACT_PERSON ?? "";
                item.TEL_NO = s.FirstOrDefault().TEL_NO ?? "";
                item.MOBILE_NO = s.FirstOrDefault().MOBILE_NO ?? "";
                item.EMAIL = s.FirstOrDefault().EMAIL ?? "";
                item.PRINT_ID = s.FirstOrDefault().PRINT_ID;
                item.HALT_AMT = s.FirstOrDefault().HALT_AMT.ToString("0.00");
                item.CGST_PER = s.FirstOrDefault().CGST_PER;
                item.SGST_PER = s.FirstOrDefault().SGST_PER;
                item.CGST_AMT = s.FirstOrDefault().CGST_AMT.ToString("0.00");
                item.SGST_AMT = s.FirstOrDefault().SGST_AMT.ToString("0.00");
                item.IGST_PER = s.FirstOrDefault().IGST_PER;
                item.IGST_AMT = s.FirstOrDefault().IGST_AMT.ToString("0.00");
                item.OTHER_AMT = s.FirstOrDefault().OTHER_AMT.ToString("0.00");

                item.DISCOUNT_AMT = s.FirstOrDefault().DISCOUNT_AMT.ToString("0.00");

                item.STATISTICAL_CHARGES = s.FirstOrDefault().STATISTICAL_CHARGES.ToString("0.00");
                if (item.GSTIN == "" || item.GSTIN.Contains("Unregistered"))
                {
                    item.TOTAL = (Convert.ToDecimal(item.AMOUNT) + Convert.ToDecimal(item.HALT_AMT) + Convert.ToDecimal(item.OTHER_AMT) + Convert.ToDecimal(item.STATISTICAL_CHARGES) + Convert.ToDecimal(item.CGST_AMT) + Convert.ToDecimal(item.SGST_AMT) - Convert.ToDecimal(item.DISCOUNT_AMT)).ToString("0.00");
                }
                else
                {
                    item.TOTAL = (Convert.ToDecimal(item.AMOUNT) + Convert.ToDecimal(item.HALT_AMT) + Convert.ToDecimal(item.OTHER_AMT) + Convert.ToDecimal(item.STATISTICAL_CHARGES) - Convert.ToDecimal(item.DISCOUNT_AMT)).ToString("0.00");
                }

                //----Modify By : Ashish Kalsarpe --- Date :19/10/2019 ----
                //---- Description : MOVEMENT BY  added For Invoice Print.
                item.MOVE_BY = s.FirstOrDefault().MOVE_BY.ToString();

                //----Modify By : Ashok Gupta --- Date :05/11/2019 ----
                //---- Description : MOVEMENT BY  added For Invoice Print.
                item.BOOKING_BRANCH = s.FirstOrDefault().BOOKING_BRANCH.ToString();


                var obj = db.usp_Select_BillGeneration_Details(Convert.ToInt32(item.BILL_ID)).ToList<usp_Select_BillGeneration_Details_Result>();
                List<VM_Docket_Details_ForBillGeneration> dtl = new List<VM_Docket_Details_ForBillGeneration>();
                foreach (var item1 in obj)
                {
                    dtl.Add(new VM_Docket_Details_ForBillGeneration { CN_CODE = item1.CN_CODE, CN_DATE = item1.CN_DATE, VEH_NO = item1.VEH_NO, SUB_TOTAL = item1.SUB_TOTAL, TOTAL_TAX = item1.TOTAL_TAX, GRAND_TOTAL = item1.GRAND_TOTAL, CONTAINER_NO = item1.CONTAINER_NO, CONTAINER_SIZE = item1.CONTAINER_SIZE ?? 0, AMOUNT = item1.AMOUNT, HALT_AMT = item1.HALT_AMT, OTHER_AMT = item1.OTHER_AMT, OTHER_TITLE = item1.OTHER_TITLE, TOTAL_AMT = item1.TOTAL_AMT, LoadType = item1.LOAD_TYPE, STATISTICAL_CHARGES = item1.STATISTICAL_CHARGES, DISCOUNT_AMT = item1.DISCOUNT_AMT });
                }

                //item.DocketList = dtl.GroupBy(d => d.CONTAINER_NO).Select(c => new VM_Docket_Details_ForBillGeneration { CONTAINER_NO = c.Key, CONTAINER_SIZE = c.Max(a => a.CONTAINER_SIZE), CN_DATE = c.Min(a => ConvertToDate(a.CN_DATE).ToString("dd/MM/yyyy")) }).ToList();

                //item.DocketList = dtl.OrderBy(c => c.CONTAINER_NO).ThenBy(c => ConvertToDate(c.CN_DATE)).ToList();

                //Modeified By : Pramesh Kumar , Dated:28-11-2017
                item.DocketList = dtl.GroupBy(d => d.CONTAINER_NO).Select(c => new VM_Docket_Details_ForBillGeneration { CONTAINER_NO = c.Key, CONTAINER_SIZE = c.Max(a => a.CONTAINER_SIZE), CN_DATE = c.Min(a => ConvertToDate(a.CN_DATE).ToString("dd/MM/yyyy")), VEH_NO = String.Join(", ", c.Select(a => a.VEH_NO)), AMOUNT = c.Sum(a => a.AMOUNT), HALT_AMT = c.Sum(a => a.HALT_AMT), OTHER_AMT = c.Sum(a => a.OTHER_AMT), STATISTICAL_CHARGES = c.Sum(a => a.STATISTICAL_CHARGES), DISCOUNT_AMT = c.Sum(a => a.DISCOUNT_AMT) }).ToList();

                TempData["VM_Bill_Details_ForPrint"] = item;
                TempData.Peek("VM_Bill_Details_ForPrint");
            }
            return Json(item, JsonRequestBehavior.AllowGet);
        }

        public DateTime ConvertToDate(string dateString)
        {
            string[] str = dateString.Split('/');
            DateTime date = new DateTime(Convert.ToInt32(str[2]), Convert.ToInt32(str[1]), Convert.ToInt32(str[0]));
            return date;
        }

        public ActionResult AddPrintStatus(string billNo, string status)
        {
            Tbl_BillGeneration_PrintStatus print = new Tbl_BillGeneration_PrintStatus();
            print.BILL_NO = "INV/" + billNo;
            print.PRTINT_STATUS = status;
            print.ADDED_ON = DateTime.Now;
            print.ADDED_BY = Session["EmployeeCode"].ToString();
            UOW.Tbl_BillGeneration_PrintStatus_Repository.Insert(print);
            string msg = "";

            int result = UOW.Save();

            if (result > 0)
            {
                msg = "ok";
            }
            else
            {
                msg = "failed";
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }

        public ActionResult AdvanceAdjustment()
        {
            ViewBag.Header = "Receipt Adjustment";
            VM_AdvanceReceipt_ForAdjustment ar = new VM_AdvanceReceipt_ForAdjustment();
            if (TempData["PartyId"] != null)
            {


                ar.PartyId = Convert.ToString(TempData["PartyId"]);

                //Added By Ashok Date :17-05-2021
                ar.ReceiptFor = Convert.ToString(TempData["ReceiptFor"]);
                ar.BillDate = Convert.ToDateTime(TempData["BillDate"]);

                var obj = db.usp_Select_AdvanceReceipt_ForAdjustment(ar.PartyId, ar.ReceiptFor).ToList<usp_Select_AdvanceReceipt_ForAdjustment_Result>();
                List<VM_Select_AdvanceReceipt_ForAdjustment> dtl = new List<VM_Select_AdvanceReceipt_ForAdjustment>();
                foreach (var item in obj)
                {
                    dtl.Add(new VM_Select_AdvanceReceipt_ForAdjustment { SrNO = item.SrNO, ADV_ID = item.ADV_ID, RECEIPT_DATE = item.RECEIPT_DATE, PAY_MODE = item.PAY_MODE, CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO, CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE, BANKNAME = item.BANKNAME, AMOUNT = item.AMOUNT, TDS_AMOUNT = item.TDS_AMOUNT, TOTAL_AMOUNT = item.TOTAL_AMOUNT, BAL_AMOUNT = item.BAL_AMOUNT, ADV_DTL_ID = item.ADV_DTL_ID });
                }
                ar.Result = dtl;

                var obj1 = db.usp_Select_BillSubmission_ForAdjustment(ar.PartyId, ar.ReceiptFor, ar.BillDate).ToList<usp_Select_BillSubmission_ForAdjustment_Result>();
                List<VM_Select_BillSubmission_ForAdjustment> dtl1 = new List<VM_Select_BillSubmission_ForAdjustment>();
                foreach (var item in obj1)
                {
                    dtl1.Add(new VM_Select_BillSubmission_ForAdjustment { SrNO = item.SRNO, SUB_DTL_ID = item.SUB_DTL_ID, SUBMISSION_DATE = item.SUBMISSION_DATE, DUE_BY = item.DUE_BY, SUBMITTED_BY = item.SUBMITTED_BY, CREDIT_DAY = item.CREDIT_DAY, BILL_ID = item.BILL_ID, BILL_NO = item.BILL_NO, BILL_DATE = item.BILL_DATE, AMOUNT = item.AMOUNT, BAL_AMOUNT = item.BAL_AMOUNT, DUE_DATE = item.DUE_DATE, REC_ADV_AMT = item.REC_ADV_AMT });
                }
                ar.BillSubmission_ForAdjustment = dtl1;
                ModelState.Clear();
            }
            return View(ar);
        }

        [HttpPost]
        public ActionResult AdvanceAdjustment(VM_AdvanceReceipt_ForAdjustment ar)
        {
            ViewBag.Header = "Receipt Adjustment";

            if (ar.Action == "Submit")
            {
                foreach (var item in ar.Result)
                {
                    if (item.IsChecked)
                    {
                        foreach (var AdjItem in ar.BillSubmission_ForAdjustment_Post)
                        {
                            AdjItem.COLLECTION_AMOUNT = AdjItem.COLLECTION_AMOUNT ?? 0;
                            if (Convert.ToDecimal(AdjItem.COLLECTION_AMOUNT) > 0)
                            {
                                Tbl_ReceiptAdjustment_Bill bill = new Tbl_ReceiptAdjustment_Bill();
                                bill.ADDED_BY = Session["EmployeeCode"].ToString();
                                bill.ADDED_ON = DateTime.Now;
                                bill.ADV_DTL_ID = item.ADV_DTL_ID;
                                bill.ADV_ID = item.ADV_ID;
                                bill.BILL_ADJ_AMOUNT = Convert.ToDecimal(AdjItem.COLLECTION_AMOUNT);
                                bill.BILL_ADJ_DATE = AdjItem.COLLECTION_DATE;
                                bill.BILL_AMOUNT = Convert.ToDecimal(AdjItem.AMOUNT);
                                bill.BILL_ID = Convert.ToDecimal(AdjItem.BILL_ID);
                                bill.STATUS = "Y";
                                UOW.ReceiptAdjustmentRepository.Insert(bill);
                            }
                        }
                    }
                }

                int result = UOW.Save();

                /*
                DataTable PostingTables;
                PostingTables = new DataTable();

                DataColumn Auto = new DataColumn("SrNo", typeof(System.Int32));
                PostingTables.Columns.Add(Auto);
                PostingTables.Columns.Add("JTrans", typeof(String));
                PostingTables.Columns.Add("JAcccode", typeof(String));
                PostingTables.Columns.Add("Amount", typeof(Double));

                PostingTables.PrimaryKey = new DataColumn[] { PostingTables.Columns["SrNo"] };

                decimal TotalCollectionAmount = 0;
                foreach (var item in ar.Result)
                {
                    if (item.IsChecked)
                    {
                        foreach (var AdjItem in ar.BillSubmission_ForAdjustment_Post)
                        {
                            AdjItem.COLLECTION_AMOUNT = AdjItem.COLLECTION_AMOUNT ?? 0;
                            if (Convert.ToDecimal(AdjItem.COLLECTION_AMOUNT) > 0)
                            {
                                TotalCollectionAmount = TotalCollectionAmount + (AdjItem.COLLECTION_AMOUNT ?? 0);
                            }
                        }
                    }
                }

                PostingTables.Rows.Add(new Object[] { 1, "D", "478", TotalCollectionAmount });
                PostingTables.Rows.Add(new Object[] { 2, "C", "392", TotalCollectionAmount });

                decimal custID = Convert.ToDecimal(ar.PartyId == "" ? "0" : ar.PartyId);
                Tbl_Customer_Mst tblCust = db.Tbl_Customer_Mst.Where(x => x.CUST_ID == custID).FirstOrDefault();
                string Narration = "Being amount received On Account from " + tblCust.CUST_NAME + " now adjusted against customer outstanding.";

                SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
                string BranchCode = Convert.ToString(LogIn.Branch_Code);

                DAL_ReceiptPosting objReceipt = new DAL_ReceiptPosting();
                int result = objReceipt.Insert_FA_ReceiptAdjustment_Bill(ar, "CO00000001", BranchCode, PostingTables, Narration, Convert.ToInt32(ar.PartyId), tblCust.CUST_CODE);
                */

                if (result > 0)
                {
                    Success(string.Format("<b>Receipt adjustment is done successfully.</b>"), true);
                }
                else
                {
                    Danger(string.Format("<b>Receipt adjustment is not done successfully.</b>"), true);
                }
                TempData["PartyId"] = ar.PartyId;
                TempData.Keep("PartyId");

                TempData["ReceiptFor"] = ar.ReceiptFor;
                TempData.Keep("ReceiptFor");

                TempData["BillDate"] = ar.BillDate;
                TempData.Keep("BillDate");

                return RedirectToAction("AdvanceAdjustment");
            }
            var obj = db.usp_Select_AdvanceReceipt_ForAdjustment(ar.PartyId, ar.ReceiptFor).ToList<usp_Select_AdvanceReceipt_ForAdjustment_Result>();
            List<VM_Select_AdvanceReceipt_ForAdjustment> dtl = new List<VM_Select_AdvanceReceipt_ForAdjustment>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Select_AdvanceReceipt_ForAdjustment { SrNO = item.SrNO, ADV_ID = item.ADV_ID, RECEIPT_DATE = item.RECEIPT_DATE, PAY_MODE = item.PAY_MODE, CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO, CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE, BANKNAME = item.BANKNAME, AMOUNT = item.AMOUNT, TDS_AMOUNT = item.TDS_AMOUNT, TOTAL_AMOUNT = item.TOTAL_AMOUNT, BAL_AMOUNT = item.BAL_AMOUNT, ADV_DTL_ID = item.ADV_DTL_ID });
            }
            ar.Result = dtl;

            var obj1 = db.usp_Select_BillSubmission_ForAdjustment(ar.PartyId, ar.ReceiptFor, ar.BillDate).ToList<usp_Select_BillSubmission_ForAdjustment_Result>();
            List<VM_Select_BillSubmission_ForAdjustment> dtl1 = new List<VM_Select_BillSubmission_ForAdjustment>();
            foreach (var item in obj1)
            {
                dtl1.Add(new VM_Select_BillSubmission_ForAdjustment { SrNO = item.SRNO, SUB_DTL_ID = item.SUB_DTL_ID, SUBMISSION_DATE = item.SUBMISSION_DATE, DUE_BY = item.DUE_BY, SUBMITTED_BY = item.SUBMITTED_BY, CREDIT_DAY = item.CREDIT_DAY, BILL_ID = item.BILL_ID, BILL_NO = item.BILL_NO, BILL_DATE = item.BILL_DATE, AMOUNT = item.AMOUNT, BAL_AMOUNT = item.BAL_AMOUNT, DUE_DATE = item.DUE_DATE, REC_ADV_AMT = item.REC_ADV_AMT });
            }
            ar.BillSubmission_ForAdjustment = dtl1;
            ModelState.Clear();

            return View(ar);
        }



        public ActionResult ChequeDeposit_Clearance()
        {
            ViewBag.Header = "Cheque Deposit & Clearance";
            VM_ChequeDeposit_Clearance chq = new VM_ChequeDeposit_Clearance();
            chq.PartyList = new SelectList(db.Tbl_Customer_Mst.Where(x => x.STATUS.ToLower() == "y").OrderBy(x => x.CUST_NAME), "CUST_ID", "CUST_NAME");
            var lst = db.usp_ChequeDtls_ForDeposit("", "", "").ToList();
            List<VM_ChequeDtls_ForDeposit> dtl = new List<VM_ChequeDtls_ForDeposit>();
            foreach (var item in lst)
            {
                dtl.Add(new VM_ChequeDtls_ForDeposit { ADV_DTL_ID = item.ADV_DTL_ID, ADV_ID = item.ADV_ID, AMOUNT = item.AMOUNT, BANK_ID = item.BANK_ID, BANKNAME = item.BANKNAME, CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE, CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO, CUST_NAME = item.CUST_NAME, PARTY_ID = item.PARTY_ID, PAY_MODE = item.PAY_MODE, SrNo = item.SrNo });

            }
            chq.Result = dtl;
            var dtBank = (from a in db.FA_tbl_BankAccount_Mst
                          join b in db.Tbl_Bank_Mst on a.bankcode equals b.BANKCODE
                          select new { BANKCODE = b.BANKCODE, BANKNAME = b.BANKNAME }).Distinct();

            SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
            string BranchCode = Convert.ToString(LogIn.Branch_Code);

            if (BranchCode == "BR00000035" || BranchCode == "BR00000041")
            {
                chq.BankList = new SelectList(dtBank.Where(x => x.BANKCODE == 138), "BANKCODE", "BANKNAME", 138);
                chq.bnkAccNumber_List = new SelectList(db.FA_tbl_BankAccount_Mst.Where(x => x.bankcode == 138 && x.bnkAccNumber == "0059200923206367"), "bnkAccNumber", "bnklName", "0059200923206367");
            }
            else
            {
                chq.BankList = new SelectList(dtBank.Where(x => x.BANKCODE == 140), "BANKCODE", "BANKNAME", 140);
                chq.bnkAccNumber_List = new SelectList(db.FA_tbl_BankAccount_Mst.Where(x => x.bankcode == 140), "bnkAccNumber", "bnklName", "0000603505015482");
            } 

            chq.Employee_List = new SelectList(dbHRM.vw_Employee_Mst, "Employee_Code", "Employee_Name");
            return View(chq);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetBankAccNumber(decimal bankcode)
        {
            var result = from bnk in db.FA_tbl_BankAccount_Mst
                         where bnk.bankcode == bankcode
                         select new { bnkAccNumber = bnk.bnkAccNumber, bnklName = bnk.bnklName };
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ChequeDeposit_Clearance(VM_ChequeDeposit_Clearance chq)
        {
            ViewBag.Header = "Cheque Deposit & Clearance";
             SP_LogIn_Result LogIn = (SP_LogIn_Result)Session["UserCredentials"];
             string BranchCode = Convert.ToString(LogIn.Branch_Code);

            if (chq.Action == "show")
            {

            }
            if (chq.Action == "submit")
            {

                //using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead }))
                //{
                Tbl_ChequeDeposit_HDR chqHDR = new Tbl_ChequeDeposit_HDR();
                chqHDR.NO_CHQ = chq.NO_cheque;
                chqHDR.CHQ_AMT = chq.chq_Amt;
                chqHDR.DEPOSIT_DATE = chq.Deposit_Date;
                chqHDR.BANK_CODE = chq.BANK_CODE;
                chqHDR.BANK_NAME = db.Tbl_Bank_Mst.Where(x => x.BANKCODE == chq.BANK_CODE).First().BANKNAME;
                chqHDR.ACCOUNT_NO = chq.bnkAccNumber;
                chqHDR.SLIP_NO = chq.Deposit_Slip;
                chqHDR.DEPOSIT_BY = chq.Deposit_Code;
                chqHDR.REMARK = chq.Remarks;
                chqHDR.ADDED_BY = Session["EmployeeCode"].ToString();
                chqHDR.ADDED_ON = System.DateTime.Now;
                chqHDR.Status = "Y";

                //UOW.Chq_ChequeDepositHDR_Repository.Insert(chqHDR);

                Tbl_ChequeDeposit_DTL chqDTL = null;
                Tbl_ChequeDepositClearance chqCLR = null;

                /*--------------- JV Posting Data Table (Initialization) -----------------------*/

                DataTable PostingTable = new DataTable();
                PostingTable.Columns.Add("srNo", typeof(Int32));
                PostingTable.Columns.Add("JTrans", typeof(String));
                PostingTable.Columns.Add("JAcccode", typeof(String));
                PostingTable.Columns.Add("Amount", typeof(Double));

                DataTable JVPostingTable = new DataTable();
                JVPostingTable.Columns.Add("srNo", typeof(Int32));
                JVPostingTable.Columns.Add("JTrans", typeof(String));
                JVPostingTable.Columns.Add("JAcccode", typeof(String));
                JVPostingTable.Columns.Add("Amount", typeof(Double));

                /*--------------- JV Posting Data Table (Initialization)  -----------------------*/

                string Narration = ""; double amount = 0;
                DAL_ReceiptPosting Posting = new DAL_ReceiptPosting();
                double ADV_ID = 0;
                foreach (VM_ChequeDtls_ForDeposit Dr in chq.Result)
                {
                    if (Dr.IsChecked == true)
                    {
                        ADV_ID = Convert.ToDouble(Dr.ADV_ID);
                        amount = Convert.ToDouble(Dr.AMOUNT ?? 0);
                        string bnklName = db.FA_tbl_BankAccount_Mst.Where(x => x.bnkAccNumber == chq.bnkAccNumber).FirstOrDefault().bnklName;
                        /*--------------- JV Posting Data Table (Fill Data) -----------------------*/
                        if (chq.Chq_Status == "C")
                        {
                            PostingTable.Rows.Add(new object[] { 1, "D", "45", Dr.AMOUNT });
                            PostingTable.Rows.Add(new object[] { 2, "C", "405", Dr.AMOUNT });

                            Narration = "Being cheque No." + Dr.CHQ_RTGS_DD_NO + " dated " + Dr.CHQ_RTGS_DD_DATE.Value.ToString("dd/MM/yyyy") + " deposited and cleared to the bank " + bnklName;

                            double tds = Convert.ToDouble(db.Tbl_AdvanceReceipt_Dtls.Where(x => x.ADV_DTL_ID == Dr.ADV_DTL_ID).FirstOrDefault().TDS_AMOUNT ?? 0);

                            JVPostingTable.Rows.Add(new object[] { 1, "D", "478", amount });
                            if (tds > 0)
                            {
                                JVPostingTable.Rows.Add(new object[] { JVPostingTable.Rows.Count + 1, "D", "820", tds });
                            }
                            JVPostingTable.Rows.Add(new object[] { JVPostingTable.Rows.Count + 1, "C", "392", amount + tds });

                        }
                        else if (chq.Chq_Status == "D")
                        {
                            JVPostingTable.Rows.Add(new object[] { 1, "D", "478", amount });
                            JVPostingTable.Rows.Add(new object[] { 2, "C", "405", amount });
                            Narration = "Being cheque No. " + Dr.CHQ_RTGS_DD_NO + " dated " + Dr.CHQ_RTGS_DD_DATE.Value.ToString("dd/MM/yyyy") + " dishonoured to the bank " + bnklName;
                        }

                        /*--------------- JV Posting Data Table (Fill Data) -----------------------*/


                        chqDTL = new Tbl_ChequeDeposit_DTL();
                        chqDTL.DEP_ID = chqHDR.DEP_ID;
                        chqDTL.CHQ_NO = Dr.CHQ_RTGS_DD_NO;
                        chqDTL.CHQ_DATE = Dr.CHQ_RTGS_DD_DATE;
                        chqDTL.CHQ_AMT = Dr.AMOUNT;
                        chqDTL.BANK_CODE = Dr.BANK_ID;
                        chqDTL.CUST_ID = Dr.PARTY_ID;
                        chqDTL.ADV_DTL_ID = Dr.ADV_DTL_ID;
                        //UOW.Chq_ChequeDepositDTL_Repository.Insert(chqDTL);

                        chqCLR = new Tbl_ChequeDepositClearance();
                        chqCLR.AddedBy = Session["EmployeeCode"].ToString();
                        chqCLR.AddedOn = System.DateTime.Now;
                        chqCLR.Status = "Y";
                        chqCLR.ApprovedBy = chq.Approved_Code;
                        chqCLR.BANK_CODE = Dr.BANK_ID;
                        chqCLR.CDS_Date = chq.Clearance_Date;
                        chqCLR.CDS_CODE = db.usp_Auto_Alphanumeric_Code("Log.Tbl_ChequeDepositClearance", "CDS_CODE", "CDS", 10).First().AutoCode;
                        chqCLR.CHQ_NO = Dr.CHQ_RTGS_DD_NO;
                        chqCLR.CHQ_DATE = Dr.CHQ_RTGS_DD_DATE;
                        chqCLR.CHQ_AMT = Dr.AMOUNT;
                        chqCLR.CUST_ID = Dr.PARTY_ID;
                        chqCLR.ChqStatus = chq.Chq_Status;
                        chqCLR.DEP_DET_ID = chqDTL.DEP_DET_ID;
                        chqCLR.Remarks = chq.Remarks;
                        //UOW.Chq_ChequeDepositCLR_Repository.Insert(chqCLR);


                    }
                }


                // int result = UOW.Save();
                string journalid = "";
                //if (result > 0)
                //{
                //    using (TransactionScope ts2 = new TransactionScope(TransactionScopeOption.Suppress, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead }))
                //    {
                string PartyCode = db.Tbl_Customer_Mst.Where(x => x.CUST_ID == chqDTL.CUST_ID).FirstOrDefault().CUST_CODE;

               

                journalid = Posting.Insert_FA_ChequeDepositStatus(chq.Deposit_Date.ToString("dd/MM/yyyy"), chq.Approved_Code, chq.Remarks, chq.Chq_Status, "CO00000001",
                BranchCode , PostingTable, PartyCode, Narration, chqCLR.CHQ_NO, chqCLR.CHQ_DATE.Value.ToString("dd/MM/yyyy"),
                Convert.ToDouble(chqCLR.CHQ_AMT ?? 0), chqHDR.ACCOUNT_NO, Convert.ToInt32(chqDTL.CUST_ID), JVPostingTable, chqCLR.CDS_CODE, ADV_ID, chqHDR, chqDTL, chqCLR);

                //    if (journalid != "")
                //    {
                //        ts2.Complete();

                //    }

                //}
                if (journalid != "")
                {

                    // ts.Complete();
                    Success(string.Format("<b>Cheque Deposit & Clearance data is submitted successfully.</b>"), true);
                }

            //}
                else
                {
                    Danger(string.Format("<b>Cheque Deposit & Clearance failed.</b>"), true);
                }
                // }

            }
            var lst = db.usp_ChequeDtls_ForDeposit(chq.PARTY_ID, chq.FROM_DT, chq.TO_DT).ToList();
            List<VM_ChequeDtls_ForDeposit> dtl = new List<VM_ChequeDtls_ForDeposit>();
            foreach (var item in lst)
            {
                dtl.Add(new VM_ChequeDtls_ForDeposit { ADV_DTL_ID = item.ADV_DTL_ID, ADV_ID = item.ADV_ID, AMOUNT = item.AMOUNT, BANK_ID = item.BANK_ID, BANKNAME = item.BANKNAME, CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE, CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO, CUST_NAME = item.CUST_NAME, PARTY_ID = item.PARTY_ID, PAY_MODE = item.PAY_MODE, SrNo = item.SrNo });

            }
            chq.Result = dtl;

            chq.PartyList = new SelectList(db.Tbl_Customer_Mst.Where(x => x.STATUS.ToLower() == "y").OrderBy(o => o.CUST_NAME), "CUST_ID", "CUST_NAME");
            var dtBank = (from a in db.FA_tbl_BankAccount_Mst
                          join b in db.Tbl_Bank_Mst on a.bankcode equals b.BANKCODE
                          select new { BANKCODE = b.BANKCODE, BANKNAME = b.BANKNAME }).Distinct();



            if (BranchCode == "BR00000035" || BranchCode == "BR00000041")
            {
                chq.BankList = new SelectList(dtBank.Where(x => x.BANKCODE == 138), "BANKCODE", "BANKNAME", 138);
                chq.bnkAccNumber_List = new SelectList(db.FA_tbl_BankAccount_Mst.Where(x => x.bankcode == 138 && x.bnkAccNumber == "0059200923206367"), "bnkAccNumber", "bnklName", "0059200923206367");
            }
            else
            {
                chq.BankList = new SelectList(dtBank.Where(x => x.BANKCODE == 140), "BANKCODE", "BANKNAME", 140);
                chq.bnkAccNumber_List = new SelectList(db.FA_tbl_BankAccount_Mst.Where(x => x.bankcode == 140), "bnkAccNumber", "bnklName", "0000603505015482");
            } 

            chq.Employee_List = new SelectList(dbHRM.vw_Employee_Mst, "Employee_Code", "Employee_Name");
            ModelState.Clear();
            return View(chq);
        }



        public ActionResult DownloadPdf()
        {
            VM_Bill_Details_ForPrint result = (VM_Bill_Details_ForPrint)TempData.Peek("VM_Bill_Details_ForPrint");

            IEnumerable<VM_Docket_Details_ForBillGeneration> docDetails = result.DocketList;
            List<VM_Bill_Details_ForPrint> hdr = new List<VM_Bill_Details_ForPrint>();
            hdr.Add(result);

            List<ItemDescription> itemList = new List<ItemDescription>()
            { 
                new ItemDescription() { ItemName = "Transport Movement Charges "+((result.PARTY_ID==244)?"(SAC CODE:996601)":""), ItemValue = result.AMOUNT },
            };

            if (Convert.ToDecimal(result.HALT_AMT) > 0)
            {
                itemList.Add(new ItemDescription() { ItemName = "Halting Charges", ItemValue = result.HALT_AMT });
            }

            if (Convert.ToDecimal(result.OTHER_AMT) > 0)
            {
                itemList.Add(new ItemDescription() { ItemName = "Other Charges", ItemValue = result.OTHER_AMT });
            }

            

            if (Convert.ToDecimal(result.STATISTICAL_CHARGES) > 0)
            {
                itemList.Add(new ItemDescription() { ItemName = "Statistical Charges", ItemValue = result.STATISTICAL_CHARGES });
            }

            if (result.GSTIN == "" || result.GSTIN.Contains("Unregistered"))
            {
                itemList.Add(new ItemDescription() { ItemName = "CGST(" + result.CGST_PER + "%)", ItemValue = result.CGST_AMT });
                itemList.Add(new ItemDescription() { ItemName = "SGST(" + result.SGST_PER + "%)", ItemValue = result.SGST_AMT });
            }

            if (Convert.ToDecimal(result.DISCOUNT_AMT) > 0)
            {
                decimal InvoiceTotal = Convert.ToDecimal(result.TOTAL) + Convert.ToDecimal(result.DISCOUNT_AMT);
                itemList.Add(new ItemDescription() { ItemName = "Invoice Total", ItemValue = InvoiceTotal.ToString() });
                itemList.Add(new ItemDescription() { ItemName = "Discount Amount (-)", ItemValue = result.DISCOUNT_AMT });
            }

            itemList.Add(new ItemDescription() { ItemName = "Total(Rs.)", ItemValue = result.TOTAL });

            //---- Added By : Ashok Gupta ----- Date:19/12/2020 ----
            //--- Description : Addess Details By Branch Code

            BranchDetails branch = new BranchDetails();
           
            string city_Name = "",branch_code="";
            if (result.BOOKING_BRANCH == "BR00000002")
                branch_code = "BR00000003";
            else
                branch_code = result.BOOKING_BRANCH;

            branch.BranchMaster = db.tbl_Branch_Master.Where(b => b.BranchType_Code == "BT00000012" && b.Branch_Code == branch_code).ToList();

            if (branch.BranchMaster.ToList()[0].City_Code != null)
                city_Name = branch.BranchMaster.ToList()[0].tbl_city_Mst.city_Name;

            string Address = branch.BranchMaster.ToList()[0].RegdAddress1 + ", " + branch.BranchMaster.ToList()[0].RegdAddress2 + ", " + city_Name + " - " + branch.BranchMaster.ToList()[0].Pincode + "," + branch.BranchMaster.ToList()[0].tbl_State_Mst.State_Name + "<br />";

            if ((branch.BranchMaster.ToList()[0].Tel_No ?? "").Trim() != "")
            {
                Address = Address + "Tel No : " + branch.BranchMaster.ToList()[0].Tel_No + ",";

                if ((branch.BranchMaster.ToList()[0].Fax_No ?? "").Trim() == "")
                {
                    Address = Address + "<br />";
                }
            }
            if ((branch.BranchMaster.ToList()[0].Fax_No ?? "").Trim() != "")
            {
                Address = Address + "Fax : " + branch.BranchMaster.ToList()[0].Fax_No + ",<br />";
            }

            string _PayableAt = result.BOOKING_BRANCH == "BR00000004" ? "Mumbai" : "Chennai";
            string _bankDtls = result.BOOKING_BRANCH == "BR00000004" ? "ICICI Bank, Padianallur Branch, Red Hills, Chennai-600052, A/C No. 603505015482, IFSC Code: ICIC0006035" : "ICICI Bank, Padianallur Branch, Red Hills, Chennai-600052, A/C No. 603505015482, IFSC Code: ICIC0006035";

            DataTable BranchAddressDtl = new DataTable();
            BranchAddressDtl.Columns.Add("ADDRESS", typeof(string));
            BranchAddressDtl.Columns.Add("GSTIN", typeof(string));
            BranchAddressDtl.Columns.Add("MSME", typeof(string));
            BranchAddressDtl.Columns.Add("EMAIL", typeof(string));
            BranchAddressDtl.Columns.Add("WEB", typeof(string));
            BranchAddressDtl.Columns.Add("PAYABLE_AT", typeof(string));
            BranchAddressDtl.Columns.Add("BANK_DTLS", typeof(string));

            BranchAddressDtl.Rows.Add(new Object[]{ Address, 
                "GSTIN : " + branch.BranchMaster.ToList()[0].GSTIN, "MSME(UAN) : " + branch.BranchMaster.ToList()[0].MSME_NO, "Email : " + branch.BranchMaster.ToList()[0].Email_Id, 
                "Web : " + branch.BranchMaster.ToList()[0].Website, _PayableAt, _bankDtls });


            LocalReport lr = new LocalReport();
            //---- Added By : Ashish Kalsarpe----- Date:22/10/2019----
            //--- Description : When Move_BY is LCL (L) Then download InvoiceTax_LCL.rdlc
            if (result.MOVE_BY == "L")
            {
                lr.ReportPath = Server.MapPath("~/RDLC/InvoiceTax_LCL.rdlc");
            }
            else
            {
                if (result.PARTY_ID == 244)
                {
                    lr.ReportPath = Server.MapPath("~/RDLC/InvoiceTax_244.rdlc");
                }
                else
                {
                    lr.ReportPath = Server.MapPath("~/RDLC/InvoiceTax.rdlc");
                }
            }

            lr.DataSources.Add(new ReportDataSource("BillDetails", hdr));
            lr.DataSources.Add(new ReportDataSource("ItemDescription", itemList));
            lr.DataSources.Add(new ReportDataSource("Dockets", docDetails));
            lr.DataSources.Add(new ReportDataSource("BranchAddressDtl", BranchAddressDtl));
            Warning[] warnings;
            string[] streamids;
            string mimeType;
            string encoding;
            string extension;


            byte[] bytes = lr.Render("PDF", null, out mimeType, out encoding, out extension, out streamids, out warnings);

            FileResult fileResult = new FileContentResult(bytes, "application/pdf");
            fileResult.FileDownloadName = result.BILL_NO + ".pdf";

            return fileResult;

        }


        public class ItemDescription
        {
            public string ItemName { get; set; }
            public string ItemValue { get; set; }
        }



        [HttpPost]
        public JsonResult GetOtherExpenseDesc(string Prefix)
        {
            var OtherTitle = db.usp_GetOtherExpense_Desc(Prefix).ToList();
            return Json(OtherTitle, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetCurrentTaxPer(double billDate)
        {
            DateTime billDate1 = new DateTime(1970, 1, 1, 0, 0, 0, 0).AddMilliseconds(billDate);

            var tblBillItemTax = db.Tbl_BILL_ITEM_TAX.ToList();
            var sgst = tblBillItemTax.Where(b => b.ADDEDON <= billDate1 && b.TAX_NAME == "SGST On GTA").OrderByDescending(o => o.ADDEDON).ElementAt(0);
            var cgst = tblBillItemTax.Where(b => b.ADDEDON <= billDate1 && b.TAX_NAME == "CGST On GTA").OrderByDescending(o => o.ADDEDON).ElementAt(0);
            var igst = tblBillItemTax.Where(b => b.ADDEDON <= billDate1 && b.TAX_NAME == "IGST On GTA").OrderByDescending(o => o.ADDEDON).ElementAt(0);
            var gst = new { SGST_ID = sgst.TAX_ID, SGST_PER = sgst.TAX_PERCENTAGE, CGST_ID = cgst.TAX_ID, CGST_PER = cgst.TAX_PERCENTAGE, IGST_ID = igst.TAX_ID, IGST_PER = igst.TAX_PERCENTAGE };
            return Json(gst, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CFSMagReceipt()
        {
            ViewBag.Header = "CFSMag Receipt";
            VM_Search_CFSMagReceipt cfs = new VM_Search_CFSMagReceipt();
            //if (TempData["PartyId"] != null)
            //{
            //ar.PartyId = Convert.ToString(TempData["PartyId"]);

            var obj = db.usp_Select_CFSMagReceipt().ToList<usp_Select_CFSMagReceipt_Result>();
            List<CFSMagReceipt> dtl = new List<CFSMagReceipt>();
            int i = 0;
            foreach (var item in obj)
            {
                dtl.Add(new CFSMagReceipt
                {
                    SrNO = ++i,
                    ADV_ID = item.ADV_ID,
                    RECEIPT_DATE = item.RECEIPT_DATE.Value.ToString("dd/MM/yyyy"),
                    PAY_MODE = item.PAY_MODE,
                    CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO,
                    CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE,
                    BANKNAME = item.BANKNAME,
                    AMOUNT = item.AMOUNT,
                    TDS_AMOUNT = item.TDS_AMOUNT,
                    TOTAL_AMOUNT = item.TOTAL_AMOUNT,
                    ADV_DTL_ID = item.ADV_DTL_ID,
                    CFS_PARTY_ID = item.CFS_PARTY_ID,
                    CFS_PARTY_NAME = item.CFS_PARTY_NAME,
                    PARTY_ID = item.PARTY_ID
                });
            }
            cfs.CFSMagReceiptList = dtl;

            //}
            return View(cfs);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CFSMagReceipt(VM_Search_CFSMagReceipt cfs)
        {
            ViewBag.Header = "CFSMag Receipt";
            try
            {
                Tbl_AdvanceReceipt_hdr ar = new Tbl_AdvanceReceipt_hdr();
                ar.ADV_ID = cfs.ADV_ID ?? 0;
                ar.PARTY_ID = cfs.PARTY_ID ?? 0;
                UOW.Tbl_AdvanceReceipt_hdr_Repository.Update(ar, o => o.PARTY_ID);
                if (cfs.PAY_MODE == "Cheque" || cfs.PAY_MODE == "DD")
                {
                    IEnumerable<Tbl_ChequeDeposit_DTL> chqDTL1 = UOW.Chq_ChequeDepositDTL_Repository.FindBy(c => c.ADV_DTL_ID == cfs.ADV_DTL_ID);
                    if (chqDTL1.Count() > 0)
                    {
                        Tbl_ChequeDeposit_DTL chqDTL = new Tbl_ChequeDeposit_DTL();
                        chqDTL.CUST_ID = cfs.PARTY_ID ?? 0;
                        chqDTL.DEP_DET_ID = chqDTL1.FirstOrDefault().DEP_DET_ID;

                        UOW.Chq_ChequeDepositDTL_Repository.Update(chqDTL, c => c.CUST_ID);

                        IEnumerable<Tbl_ChequeDepositClearance> chqCLR1 = UOW.Chq_ChequeDepositCLR_Repository.FindBy(c => c.DEP_DET_ID == chqDTL1.FirstOrDefault().DEP_DET_ID);
                        if (chqCLR1.Count() > 0)
                        {
                            Tbl_ChequeDepositClearance chqCLR = new Tbl_ChequeDepositClearance();
                            chqCLR.CUST_ID = cfs.PARTY_ID ?? 0;
                            chqCLR.CDS_ID = chqCLR1.FirstOrDefault().CDS_ID;
                            UOW.Chq_ChequeDepositCLR_Repository.Update(chqCLR, c => c.CUST_ID);
                        }
                    }
                }
                int result = UOW.Save();
                if (result > 0)
                {
                    Success(string.Format("<b>Party Name is updated successfully.</b>"), true);
                    return RedirectToAction("CFSMagReceipt");
                }
                else
                {
                    Danger(string.Format("<b>Party Name updation is failed.</b>"), true);
                }
            }
            catch
            {
                Danger(string.Format("<b>Exception occured.</b>"), true);
            }
            return View(cfs);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCustomerName(string CustName)
        {
            String[] strArray = CustName.Split(' ');
            List<Party> custList = new List<Party>();
            String s = "PVT., PVT , LTD, LTD., pvt., pvt , ltd, ltd.";

            foreach (String str in strArray)
            {
                if (!(str.Trim() == "" || str.Trim() == "(" || str.Trim() == ")" || str.Trim() == "," || str.Trim() == "'" || s.Contains(str.Trim())))
                {
                    var list = db.usp_Select_CFSPartyName_Soundex(str).ToList<usp_Select_CFSPartyName_Soundex_Result>();
                    foreach (usp_Select_CFSPartyName_Soundex_Result cust in list)
                    {
                        if (!custList.Any(a => a.PartyId == cust.CUST_ID))
                        {
                            custList.Add(new Party() { PartyId = cust.CUST_ID, PartyName = cust.CUST_NAME });
                        }
                    }
                }
            }
            return Json(custList.ToList(), JsonRequestBehavior.AllowGet);
        }

        public class Party
        {
            public decimal PartyId { get; set; }
            public string PartyName { get; set; }
            public bool IsChecked { get; set; }
        }


        //------  Added By : Ashish Kalsarpe ----------------
        //------  Added Date : 11/06/2018 -------------------
        //------  Description : To-Pay Billing MR ----------------

        public ActionResult ToPayBilling_MR()
        {
            ViewBag.Header = "To-Pay Billing MR";
            VM_ToPay_Billing VM = new VM_ToPay_Billing();
            VM.MRLocationList = new SelectList(comm.LocationList(), "Value", "Text");
            return View(VM);
        }
        [HttpPost]
        public ActionResult ToPayBilling_MR(VM_ToPay_Billing VM)
        {

            VM.MRLocationList = new SelectList(comm.LocationList(), "Value", "Text");
            ViewBag.Header = "To-Pay Billing MR";
            var obj = db.usp_Select_ToPay_Booking_Consignment(Convert.ToString(VM.BillingPartyID), Convert.ToString(VM.FromDate), Convert.ToString(VM.ToDate)).ToList<usp_Select_ToPay_Booking_Consignment_Result>();
            List<VM_Select_ToPay_Booking_Consignment> dtl = new List<VM_Select_ToPay_Booking_Consignment>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Select_ToPay_Booking_Consignment
                {
                    CN_ID = item.CN_ID,
                    CN_CODE = item.CN_CODE,
                    CN_DATE = item.CN_DATE,
                    CNOR_ID = item.CNOR_ID,
                    CONSIGNOR = item.CONSIGNOR,
                    CNEE_ID = item.CNEE_ID,
                    CONSIGNEE = item.CONSIGNEE,
                    BILL_PARTY_ID = item.BILL_PARTY_ID,
                    BILL_PARTY_TYPE = item.BILL_PARTY_TYPE,
                    BILLING_PARTY = item.BILLING_PARTY,
                    CUST_GSTNO = item.CUST_GSTNO,
                    SUB_TOTAL = item.SUB_TOTAL,
                    TOTAL_TAX = item.TOTAL_TAX,
                    GRAND_TOTAL = item.GRAND_TOTAL,
                    BAL_AMOUNT = item.BAL_AMOUNT,
                    IsChecked = item.IsChecked ?? false,
                    SGST_PER = item.SGST_PER,
                    SGST_AMT = item.SGST_AMT,
                    CGST_PER = item.CGST_PER,
                    CGST_AMT = item.CGST_AMT,
                    IGST_PER = item.IGST_PER,
                    IGST_AMT = item.IGST_AMT,
                    THC_ID = item.THC_ID,
                    THC_NO = item.THC_NO,
                    FREIGHT = item.FREIGHT,
                    FREIGHT_TYPE = item.FREIGHT_TYPE
                });
            }
            VM.ToPay_List = dtl;
            return View(VM);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult GetCNDetailsForMR(decimal CN_ID, string CustID)
        {
            var Obj = db.usp_Select_ToPay_Booking_Consignment(CustID, "", "").Where(x => x.CN_ID == CN_ID).ToList<usp_Select_ToPay_Booking_Consignment_Result>();
            return Json(Obj, JsonRequestBehavior.AllowGet);
        }

        public ActionResult AdvanceReceipt_ForAdjustment(string CustID)
        {
            var obj = db.usp_Select_AdvanceReceipt_ForAdjustment(CustID,"O").ToList<usp_Select_AdvanceReceipt_ForAdjustment_Result>();
            List<VM_Select_AdvanceReceipt_ForAdjustment> dtl = new List<VM_Select_AdvanceReceipt_ForAdjustment>();
            foreach (var item in obj)
            {
                dtl.Add(new VM_Select_AdvanceReceipt_ForAdjustment { SrNO = item.SrNO, ADV_ID = item.ADV_ID, RECEIPT_DATE = item.RECEIPT_DATE, PAY_MODE = item.PAY_MODE, CHQ_RTGS_DD_NO = item.CHQ_RTGS_DD_NO, CHQ_RTGS_DD_DATE = item.CHQ_RTGS_DD_DATE, BANKNAME = item.BANKNAME, AMOUNT = item.AMOUNT, TDS_AMOUNT = item.TDS_AMOUNT, TOTAL_AMOUNT = item.TOTAL_AMOUNT, BAL_AMOUNT = item.BAL_AMOUNT, ADV_DTL_ID = item.ADV_DTL_ID });
            }
            return Json(dtl, JsonRequestBehavior.AllowGet);
        }

        //---------- Added by    : Ashish Kalsarpe -----------------
        //---------- Added Date  : 29/05/2018 -----------------
        //---------- Description : Insert To Pay Billing MR Details. ------------------------
        public ActionResult ToPay_Billing_MR_Entry(DateTime MR_DATE, string MR_LOC, string MANUAL_MR_NO, decimal CN_ID, decimal THC_ID, decimal CUST_ID, string GSTNO, string PAYMODE, string CHQ_DD_RTGS_NO, DateTime? CHQ_DD_RTGS_DATE, decimal? BANKCODE,
         decimal RECEIVE_AMT, string AMOUNT_IN_WORD, decimal? SGST_PER, decimal? SGST_AMT, decimal? CGST_PER, decimal? CGST_AMT, decimal? IGST_PER, decimal? IGST_AMT, decimal? ADV_ID, decimal? ADV_DTL_ID)
        {
            System.Data.Objects.ObjectParameter objMR_ID = new System.Data.Objects.ObjectParameter("MR_ID", typeof(decimal));
            System.Data.Objects.ObjectParameter objMR_CODE = new System.Data.Objects.ObjectParameter("MR_CODE", typeof(string));

            var obj = db.Usp_Insert_ToPay_Billing_MR(objMR_ID, objMR_CODE, MR_DATE, MR_LOC, MANUAL_MR_NO, CN_ID, THC_ID, CUST_ID, GSTNO, PAYMODE, CHQ_DD_RTGS_NO,
                CHQ_DD_RTGS_DATE, BANKCODE, RECEIVE_AMT, AMOUNT_IN_WORD, SGST_PER, SGST_AMT, CGST_PER, CGST_AMT, IGST_PER, IGST_AMT, ADV_ID, ADV_DTL_ID, DateTime.Now, Session["EmployeeCode"].ToString());

            var MR_ID = objMR_ID.Value ?? 0;
            var MR_CODE = objMR_CODE.Value;

            if (PAYMODE != "Advance")
            {
                Tbl_AdvanceReceipt_hdr arHdr = new Tbl_AdvanceReceipt_hdr();
                arHdr.RECEIPT_DATE = Convert.ToDateTime(MR_DATE);
                arHdr.PARTY_ID = Convert.ToInt32(CUST_ID);
                arHdr.AMOUNT = Convert.ToDecimal(RECEIVE_AMT);
                arHdr.TOTAL_AMOUNT = Convert.ToDecimal(RECEIVE_AMT);
                arHdr.PAY_MODE = PAYMODE;
                arHdr.PAY_DETAILS = "";
                arHdr.ADDED_ON = DateTime.Now;
                arHdr.ADDED_BY = Session["EmployeeCode"].ToString();
                arHdr.CN_ID = CN_ID;
                arHdr.SOURCE = "To Pay";

                UOW.Tbl_AdvanceReceipt_hdr_Repository.Insert(arHdr);

                if (arHdr.PAY_MODE != "Cash")
                {
                    Tbl_AdvanceReceipt_Dtls arDtls = new Tbl_AdvanceReceipt_Dtls();
                    arDtls.ADV_ID = arHdr.ADV_ID;
                    arDtls.CHQ_RTGS_DD_NO = CHQ_DD_RTGS_NO;
                    arDtls.CHQ_RTGS_DD_DATE = CHQ_DD_RTGS_DATE;
                    arDtls.BANK_ID = Convert.ToInt32(BANKCODE);
                    arDtls.AMOUNT = Convert.ToDecimal(RECEIVE_AMT);
                    UOW.Tbl_AdvanceReceipt_Dtls_Repository.Insert(arDtls);
                }

                Tbl_AdvanceReceipt_CN_Adjust cnDtls = new Tbl_AdvanceReceipt_CN_Adjust();
                cnDtls.ADV_ID = arHdr.ADV_ID;
                cnDtls.CN_ID = CN_ID;
                cnDtls.ADJ_AMOUNT = RECEIVE_AMT;
                UOW.Tbl_AdvanceReceipt_CN_Adjust_Repository.Insert(cnDtls);
                UOW.Save();
            }
            else
            {
                Tbl_AdvanceReceipt_CN_Adjust cnDtls = new Tbl_AdvanceReceipt_CN_Adjust();
                cnDtls.ADV_ID = Convert.ToDecimal(ADV_ID);
                cnDtls.CN_ID = CN_ID;
                cnDtls.ADJ_AMOUNT = RECEIVE_AMT;
                UOW.Tbl_AdvanceReceipt_CN_Adjust_Repository.Insert(cnDtls);
                UOW.Save();
            }
            return Json(MR_CODE, JsonRequestBehavior.AllowGet);
        }
        public ActionResult ToPay_Billing_MR_Dtls(string MR_CODE)
        {

            var obj = db.Usp_Select_Topay_Billing_MR_Dtls(MR_CODE);
            return Json(obj, JsonRequestBehavior.AllowGet);
        }

        //---- To Pay Billing MR View -----------------       
        public ActionResult ToPay_Billing_MR_View()
        {
            ViewBag.Header = "To-Pay Billing MR View";
            VM_ToPay_Billing VM = new VM_ToPay_Billing();
            return View(VM);
        }
        [HttpPost]
        public ActionResult ToPay_Billing_MR_View(VM_ToPay_Billing VM)
        {
            ViewBag.Header = "To-Pay Billing MR View";
            VM.ToPay_MR_List = db.Usp_Select_ToPay_MR_List(VM.BillingPartyID, VM.FromDate, VM.ToDate).ToList<Usp_Select_ToPay_MR_List_Result>();
            return View(VM);
        }

        public ActionResult InvoiceByCustomer_List()
        {
            Session["EmployeeCode"] = "guest";
            Session["ModeOfSite"] = "mob";
            ViewBag.Header = "Invoice List";
            VM_InvoiceSearch t = new VM_InvoiceSearch();
            string m = Request.QueryString["m"] ?? "0";
            var InvoiceList = db.usp_Customer_Invoice(m, "", "").ToList<usp_Customer_Invoice_Result>();
            TempData["mob"] = m;
            t.InvoiceList = InvoiceList;

            return View(t);
        }

        [HttpPost]
        public ActionResult InvoiceByCustomer_List(VM_InvoiceSearch t)
        {
            Session["EmployeeCode"] = "guest";
            Session["ModeOfSite"] = "mob";
            ViewBag.Header = "Invoice List";

            string m = (string)TempData["mob"];
            TempData.Keep("mob");
            string from = "", to = "";
            if (t.FromBillDate != null)
            {
                from = t.FromBillDate.Value.Day.ToString() + "/" + t.FromBillDate.Value.Month.ToString() + "/" + t.FromBillDate.Value.Year.ToString();
            }
            if (t.ToBillDate != null)
            {
                to = t.ToBillDate.Value.Day.ToString() + "/" + t.ToBillDate.Value.Month.ToString() + "/" + t.ToBillDate.Value.Year.ToString();
            }
            var InvoiceList = db.usp_Customer_Invoice(m, from, to).ToList<usp_Customer_Invoice_Result>();
            t.InvoiceList = InvoiceList;
            return View(t);
        }

        public ActionResult ReceiptByCustomer_List()
        {
            Session["EmployeeCode"] = "guest";
            Session["ModeOfSite"] = "mob";
            ViewBag.Header = "Receipt List";
            VM_ReceiptSearch t = new VM_ReceiptSearch();
            string m = Request.QueryString["m"] ?? "0";
            var ReceiptList = db.usp_Customer_Receipt(m, "", "").Take(3).ToList<usp_Customer_Receipt_Result>();
            TempData["mob"] = m;
            t.ReceiptList = ReceiptList;

            return View(t);
        }

        [HttpPost]
        public ActionResult ReceiptByCustomer_List(VM_ReceiptSearch t)
        {
            Session["EmployeeCode"] = "guest";
            Session["ModeOfSite"] = "mob";
            ViewBag.Header = "Receipt List";

            string m = (string)TempData["mob"];
            TempData.Keep("mob");
            string from = "", to = "";
            if (t.FromBillDate != null)
            {
                from = t.FromBillDate.Value.Day.ToString() + "/" + t.FromBillDate.Value.Month.ToString() + "/" + t.FromBillDate.Value.Year.ToString();
            }
            if (t.ToBillDate != null)
            {
                to = t.ToBillDate.Value.Day.ToString() + "/" + t.ToBillDate.Value.Month.ToString() + "/" + t.ToBillDate.Value.Year.ToString();
            }
            var ReceiptList = db.usp_Customer_Receipt(m, from, to).ToList<usp_Customer_Receipt_Result>();
            t.ReceiptList = ReceiptList;
            return View(t);
        }


        public ActionResult CustomerWise_OS()
        {
            Session["EmployeeCode"] = "guest";
            Session["ModeOfSite"] = "mob";
            ViewBag.Header = "Customer Wise Outstanding";

            string m = Request.QueryString["m"] ?? "0";
            usp_CustomerWise_OS_Mob_Result result = db.usp_CustomerWise_OS_Mob(m).ToList<usp_CustomerWise_OS_Mob_Result>().FirstOrDefault();
            return View(result);
        }

    }
}

_______________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________
