                       ROUTERS   -     A router is a device that connects two or more
                                       packet-switched networks or subnetworks. It serves
                                       two primary functions: managing traffic between these networks 
                                       by forwarding data packets to their intended IP addresses, 
                                       and allowing multiple devices to use the same Internet connection.
                                      
                                      
                       FILTERS   -      Filter is a custom class where you can write custom logic
                                        to execute before or after an action method executes.
                                      
                                        Filters can be applied to an action method or controller in a declarative or programmatic way.
                                        Declarative means by applying a filter attribute to an action method or controller class and programmatic
                                        means by implementing a corresponding interface. 
                                      
                                            * Authorization filters 
                                            * Action filters 
                                            * Result filters 
                                            * Exception filters 
                                            
                     
                  ActionResult  -       An action result is what a controller action returns in response to a browser request. The ASP.NET MVC 
                                        framework supports several types of action results including: ViewResult - Represents HTML and markup. EmptyResult -
                                        Represents no result. RedirectResult - Represents a redirection to a new URL.
                                        
                                         All the public methods of the Controller class are called Action methods.
                                         They are like any other normal methods with the following restrictions:

                                                  1.   Action method must be public. It cannot be private or protected
                                                  2.   Action method cannot be overloaded
                                                  3.   Action method cannot be a static method.

                                            
                                            
                      
                       ViewBag  -       ViewBag is a way to pass data from the controller to the view. It is a type object and is a dynamic property
                                        under the controller base class. Compared to ViewData, it works similarly but
                                        is known to be a bit slower and was introduced in ASP.NET MVC 3.0
                                        
                                        ViewBag only transfers data from controller to view, not visa-versa.
                                        ViewBag values will be null if redirection occurs.


                  Controllers   -       controllers are used to control the way a visitor interacts with an ASP.NET MVC website.
                  
                  
                     Models    -       An MVC model contains all of your application logic that is not contained in a view or a controller.
                                       The model should contain all of your application business logic, validation logic, and database access logic.
                                       
                                       
                     GET       -       The get method returns the value of the variable name .
                     
                     
                     SET       -       The set method assigns a value to the name variable.
                     
                     
               ActionResult    -       MVC framework includes various Result classes, which can be returned from an action method.
                                       The result classes represent different types of responses, such as HTML, file, string, JSON,
                                       javascript, etc. The following table lists all the result classes available in ASP.NET MVC.    
                                       
                                       
                                                Result Class   	Description
                                                ViewResult 	Represents HTML and markup.
                                                EmptyResult 	Represents No response.
                                                ContentResult 	Represents string literal.
                                                FileContentResult/ FilePathResult/ FileStreamResult 	Represents the content of a file.
                                                JavaScriptResult 	Represent a JavaScript script.
                                                JsonResult 	Represent JSON that can be used in AJAX.
                                                RedirectResult 	Represents a redirection to a new URL.
                                                RedirectToRouteResult 	Represent another action of same or other controller.
                                                PartialViewResult 	Returns HTML from Partial view.
                                                HttpUnauthorizedResult 	Returns HTTP 403 status. 
                                                
                                                
                                        The ActionResult class is a base class of all the above result classes, 
                                        so it can be the return type of action method
                                        that returns any result listed above. However,
                                        you can specify the appropriate result class as a return type of action method.                
                                                
                                       
                  
                  ViewModel    -        In ASP.NET MVC, ViewModel is a class that contains the fields which are represented in the strongly-typed view.
                                        It is used to pass data from controller to strongly-typed view.
                                        
                                        
         strongly-typed view.   -      The Strongly typed views are used for rendering specific types of model objects,
                                       instead of using the general ViewData structure.
                                       
                                      
                                      
          HttpGet and HttpPost -        HttpGet and HttpPost are both the methods of posting client data or form data to the server.
                                        HTTP is a HyperText Transfer Protocol that is designed to send and receive the data between
                                        client and server using web pages.

                                        HTTPGET and HTTPPOST attributes encode request parameters as key and value pairs in the HTTP request.
                                        The HttpGet protocol and the HttpPost protocol provide backward compatibility.
                                        Find the below example. You may want two versions of the Search method,
                                        one that renders the Search form and the other that handles the request when that form is posted.

                                        Whenever the POST request for /Values/Search is received, 
                                        the action invoker creates a list of all methods of the Controller that match the Search action name.
                                        In this case, you would end up with a list of two methods. Immediately,
                                        the invoker looks at all of the ActionSelectorAttribute instances applied to each method and calls the IsValidForRequest method on each.
                                        If each attribute returns true, then the method is considered valid for the current action.

                                        Let us consider one case; when you ask the first method if it can handle a POST request,
                                        it will respond with false because it only handles GET requests.
                                        The second method responds with true because it can handle the POST request, 
                                        and it is the one selected to handle the action for post request.

                                        While doing this action, no method is found that meets these criteria, 
                                        the invoker will call the HandleUnknownAction method on the Controller, 
                                        supplying the name of the missing action. If more than one action method meeting these criteria is found,
                                        an InvalidOperationException is thrown.                        
                                        
                                        
      Razor-View-Engine     -          Razor is a markup syntax that lets you embed server-based code into web pages using C# and VB.Net. 
                                       It is not a programming language. It is a server side markup language.
                                       Razor has no ties to ASP.NET MVC because Razor is a general-purpose templating engine. 
                                       You can use it anywhere to generate output like HTML.                                  



        AntiForgeryToken()  -          To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, also called request verification tokens.
                                       The client requests an HTML page that contains a form. The server includes two tokens in the response.
                                       One token is sent as a cookie. The other is placed in a hidden form field.
                              
                              
          Filters           -          Sometimes you want to perform logic either before an action method is called or after an action method runs.
                                       To support this, ASP.NET MVC provides filters. Filters are custom classes that provide both a declarative and programmatic
                                       means to add pre-action and post-action behavior to controller action methods.            
                                       
                                       
                                       
              Helpers   -             The ASP.NET MVC framework incorporates the below set of standard HTML Helpers.

                                            @Html.TextBox
                                            @Html.Password
                                            @Html.TextArea
                                            @Html.CheckBox
                                            @Html.RadioButton
                                            @Html.DropDownList
                                            @Html.ListBox
                                            @Html.Hidden
                                            @Html.Display
                                            @Html.Editor
                                            @Html.ActionLink
                                            @Html.BeginForm
                                            @Html.Label
                                            
                                            
                                            
                                            
                                            
                                            
                                            
       Method & Construction -   Constructor is used to create and initialize an Object . Method is used to execute certain statements.
                                 A constructor is invoked implicitly by the System. A method is to be invoked during program code.                                     
                                            
                                            
               Tempdata      -    TempData is used to transfer data from view to controller, controller to view, 
                                  or from one action method to another action method of the same or a different controller.
                                  TempData stores the data temporarily and automatically removes it after retrieving a value.                               
                                            
                                            
               References   -    helps you to avoid plagiarism by making it clear which ideas are your own and which are someone else's.
