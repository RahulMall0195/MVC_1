                       ROUTERS   -     A router is a device that connects two or more
                                       packet-switched networks or subnetworks. It serves
                                       two primary functions: managing traffic between these networks 
                                       by forwarding data packets to their intended IP addresses, 
                                       and allowing multiple devices to use the same Internet connection.
                                      
                                      
                       FILTERS   -      Filter is a custom class where you can write custom logic
                                        to execute before or after an action method executes.
                                      
                                        Filters can be applied to an action method or controller in a declarative or programmatic way.
                                        Declarative means by applying a filter attribute to an action method or controller class and programmatic
                                        means by implementing a corresponding interface. 
                                      
                                            * Authorization filters 
                                            * Action filters 
                                            * Result filters 
                                            * Exception filters 
                                            
                     
                  ActionResult  -       An action result is what a controller action returns in response to a browser request. The ASP.NET MVC 
                                        framework supports several types of action results including: ViewResult - Represents HTML and markup. EmptyResult -
                                        Represents no result. RedirectResult - Represents a redirection to a new URL.
                                        
                                         All the public methods of the Controller class are called Action methods.
                                         They are like any other normal methods with the following restrictions:

                                                  1.   Action method must be public. It cannot be private or protected
                                                  2.   Action method cannot be overloaded
                                                  3.   Action method cannot be a static method.

                                            
                                            
                      
                       ViewBag  -       ViewBag is a way to pass data from the controller to the view. It is a type object and is a dynamic property
                                        under the controller base class. Compared to ViewData, it works similarly but
                                        is known to be a bit slower and was introduced in ASP.NET MVC 3.0


                  Controllers   -       controllers are used to control the way a visitor interacts with an ASP.NET MVC website.
                  
                  
                     Models    -       An MVC model contains all of your application logic that is not contained in a view or a controller.
                                       The model should contain all of your application business logic, validation logic, and database access logic.
                                       
                                       
                     GET       -       The get method returns the value of the variable name .
                     
                     
                     SET       -       The set method assigns a value to the name variable.
                     
                     
               ActionResult    -       MVC framework includes various Result classes, which can be returned from an action method.
                                       The result classes represent different types of responses, such as HTML, file, string, JSON,
                                       javascript, etc. The following table lists all the result classes available in ASP.NET MVC.    
                                       
                                       
                                                Result Class   	Description
                                                ViewResult 	Represents HTML and markup.
                                                EmptyResult 	Represents No response.
                                                ContentResult 	Represents string literal.
                                                FileContentResult/ FilePathResult/ FileStreamResult 	Represents the content of a file.
                                                JavaScriptResult 	Represent a JavaScript script.
                                                JsonResult 	Represent JSON that can be used in AJAX.
                                                RedirectResult 	Represents a redirection to a new URL.
                                                RedirectToRouteResult 	Represent another action of same or other controller.
                                                PartialViewResult 	Returns HTML from Partial view.
                                                HttpUnauthorizedResult 	Returns HTTP 403 status. 
                                                
                                                
                                        The ActionResult class is a base class of all the above result classes, 
                                        so it can be the return type of action method
                                        that returns any result listed above. However,
                                        you can specify the appropriate result class as a return type of action method.                
                                                
                                       
                  
                  ViewModel    -        In ASP.NET MVC, ViewModel is a class that contains the fields which are represented in the strongly-typed view.
                                        It is used to pass data from controller to strongly-typed view.
                                        
                                        
         strongly-typed view.   -      The Strongly typed views are used for rendering specific types of model objects,
                                       instead of using the general ViewData structure.
                                       
                                       
